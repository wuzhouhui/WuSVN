From 79ae9dfbb77c42b60109c24e7442e2c47a4aef40 Mon Sep 17 00:00:00 2001
From: wuzhouhui <wuzhouhui250@gmail.com>
Date: Sun, 11 Aug 2019 21:54:14 +0800
Subject: [PATCH 1/2] svn/ci: support hook post-commit in client side

(cherry picked from commit 4c0a49ab64ca18e32b59202c2477c34512b3d570)
---
 README                      |  1 +
 subversion/svn/commit-cmd.c | 66 +++++++++++++++++++++++++++++++++++++
 2 files changed, 67 insertions(+)

diff --git a/README b/README
index 72dc8a5..6d7028a 100644
--- a/README
+++ b/README
@@ -12,3 +12,4 @@ Main patches:
          .svn/hooks
       8. Decrease max width of shelve outputs.
       9. svn/shelve: do not exec external tools when diffstat.
+     10. Support client side hook post-commit.
diff --git a/subversion/svn/commit-cmd.c b/subversion/svn/commit-cmd.c
index 3e4bd7e..0464acc 100644
--- a/subversion/svn/commit-cmd.c
+++ b/subversion/svn/commit-cmd.c
@@ -143,6 +143,59 @@ pre_commit(svn_client_ctx_t *ctx, const char *target, apr_pool_t *pool)
   return SVN_NO_ERROR;
 }
 
+static svn_error_t *
+post_commit(svn_client_ctx_t *ctx, const char *target, apr_pool_t *pool)
+{
+  const char *wcroot_abspath, *abspath;
+  svn_node_kind_t kind;
+  svn_boolean_t executable = FALSE;
+  int sys_err;
+
+  SVN_ERR(svn_dirent_get_absolute(&abspath, target, pool));
+
+  SVN_ERR(svn_client_get_wc_root(&wcroot_abspath,
+                                 abspath,
+                                 ctx,
+                                 pool,
+                                 pool));
+
+  abspath = svn_dirent_join_many(pool,
+                                 wcroot_abspath,
+                                 svn_wc_get_adm_dir(pool),
+                                 "hooks/post-commit",
+                                 SVN_VA_NULL);
+
+  /* Now, the abspath points to post-commit hook script. If script
+   * exist and executable, we will run it.
+   */
+
+  SVN_ERR(svn_io_check_resolved_path(abspath, &kind, pool));
+  if (kind == svn_node_none)
+    {
+      return;
+    }
+  if (kind != svn_node_file)
+    {
+      return svn_error_create(0, NULL, _("post-commit hook is not a file"));
+    }
+
+  SVN_ERR(svn_io_is_file_executable(&executable, abspath, pool));
+  if (!executable)
+    {
+      return svn_error_create(0, NULL,
+                              _("post-commit hook is not executable"));
+    }
+
+  /* execute pre-commit */
+  sys_err = system(abspath);
+  if (sys_err != 0)
+    {
+      return svn_error_create(SVN_ERR_EXTERNAL_PROGRAM, NULL,
+                              _("post-commit hook exits with failure"));
+    }
+
+  return SVN_NO_ERROR;
+}
 
 
 /* This implements the `svn_opt_subcommand_t' interface. */
@@ -248,5 +301,18 @@ svn_cl__commit(apr_getopt_t *os,
                            pool);
   SVN_ERR(svn_cl__cleanup_log_msg(ctx->log_msg_baton3, err, pool));
 
+  /* Execute post-commit if possible */
+  if (!err && opt_state->bypass_hooks == FALSE)
+    {
+      err = post_commit(ctx, APR_ARRAY_IDX(targets, 0, const char *), pool);
+      if (err)
+        {
+          char buf[70];
+          svn_cmdline_printf(pool, _("%s\n"),
+                             svn_err_best_message(err, buf, sizeof(buf)));
+          svn_error_clear(err);
+        }
+    }
+
   return SVN_NO_ERROR;
 }
-- 
2.22.0

