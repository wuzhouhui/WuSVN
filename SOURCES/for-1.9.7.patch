diff --git a/.editorconfig b/.editorconfig
new file mode 100644
index 0000000..55a3c15
--- /dev/null
+++ b/.editorconfig
@@ -0,0 +1,9 @@
+# top-most EditorConfig file
+# See http://editorconfig.org/
+root = true
+
+[*]
+indent_style = space
+indent_size = 2
+insert_final_newline = true
+trim_trailing_whitespace = false
diff --git a/README b/README
index 2350cee..72b5950 100644
--- a/README
+++ b/README
@@ -1,84 +1,10 @@
-
-               Subversion, a version control system.
-               =====================================
-
-$LastChangedDate: 2016-05-31 16:08:20 +0000 (Tue, 31 May 2016) $
-
-Contents:
-
-     I. A FEW POINTERS
-    II. DOCUMENTATION
-   III. PARTICIPATING IN THE SUBVERSION COMMUNITY
-    IV. QUICKSTART GUIDE
-     V. CONVERTING FROM CVS
-
-
-
-I.    A FEW POINTERS
-
-      For an overview of the Subversion project, visit
-
-         http://subversion.apache.org/
-
-      Once you have a Subversion client you can get the latest version
-      of the code with the command:
-
-         $ svn co http://svn.apache.org/repos/asf/subversion/trunk subversion
-
-
-
-II.   DOCUMENTATION
-
-      The main documentation is the Subversion Book - an on-line version
-      can be found at:
-      
-         http://svnbook.red-bean.com/
-
-      It is written in DocBook XML, and the sources can be found at:
-
-         http://svn.code.sf.net/p/svnbook/source/trunk/
-         
-      If you wish to build the documentation from source, read the
-      en/README file within the book source.
-
-
-
-III.  PARTICIPATING IN THE SUBVERSION COMMUNITY
-
-      First, read http://subversion.apache.org/docs/community-guide/
-      It describes Subversion coding and log message standards, as well
-      as how to join discussion lists.
-
-      Talk on IRC with developers:  irc.freenode.net, channel #svn-dev.
-
-      Read the FAQ:  http://subversion.apache.org/faq.html
-
-
-
-IV.   QUICKSTART GUIDE
-
-      See the final section of the first chapter of the Subversion Book.
-
-
-
-V.    CONVERTING FROM CVS
-
-      If you're a CVS user trying to move your CVS history over to
-      Subversion, then be sure to visit the 'cvs2svn' project:
-
-         http://cvs2svn.tigris.org
-
-      You can get the latest released version of the cvs2svn converter
-      from the project downloads area:
-
-         http://cvs2svn.tigris.org/servlets/ProjectDocumentList?folderID=2976
-
-      Please note that the cvs2svn project is a *separate* project from
-      Subversion.  If you have problems with cvs2svn or are confused,
-      please email the cvs2svn project's mailing lists, not the
-      Subversion lists.
-
-      Finally, be sure to see Appendix B in the Subversion Book.  It
-      contains a very quick overview of the major differences between
-      CVS and Subversion.
-
+Subversion with my patches, based on 1.9.x
+
+MAIN PATCHES
+      1. Output paging automatically
+      2. Ignore files if they match the patterns in .svnignore
+      3. Syntax highlight
+      4. New subcommand clean for removing unversioned files
+      5. Add option -v for subcommand commit, for print unified diff in log
+         message template
+      6. Add option --stat for subcommand diff and log
diff --git a/build-outputs.mk b/build-outputs.mk
index e82762f..78c9812 100644
--- a/build-outputs.mk
+++ b/build-outputs.mk
@@ -849,8 +849,8 @@ subversion/tests/libsvn_subr/subst_translate-test$(EXEEXT): $(subst_translate_te
 	cd subversion/tests/libsvn_subr && $(LINK) $(subst_translate_test_LDFLAGS) -o subst_translate-test$(EXEEXT)  $(subst_translate_test_OBJECTS) ../../../subversion/tests/libsvn_test-1.la ../../../subversion/libsvn_subr/libsvn_subr-1.la $(SVN_APRUTIL_LIBS) $(SVN_APR_LIBS) $(LIBS)
 
 svn_PATH = subversion/svn
-svn_DEPS = subversion/svn/add-cmd.lo subversion/svn/auth-cmd.lo subversion/svn/blame-cmd.lo subversion/svn/cat-cmd.lo subversion/svn/changelist-cmd.lo subversion/svn/checkout-cmd.lo subversion/svn/cl-conflicts.lo subversion/svn/cleanup-cmd.lo subversion/svn/commit-cmd.lo subversion/svn/conflict-callbacks.lo subversion/svn/copy-cmd.lo subversion/svn/delete-cmd.lo subversion/svn/deprecated.lo subversion/svn/diff-cmd.lo subversion/svn/export-cmd.lo subversion/svn/file-merge.lo subversion/svn/help-cmd.lo subversion/svn/import-cmd.lo subversion/svn/info-cmd.lo subversion/svn/list-cmd.lo subversion/svn/lock-cmd.lo subversion/svn/log-cmd.lo subversion/svn/merge-cmd.lo subversion/svn/mergeinfo-cmd.lo subversion/svn/mkdir-cmd.lo subversion/svn/move-cmd.lo subversion/svn/notify.lo subversion/svn/patch-cmd.lo subversion/svn/propdel-cmd.lo subversion/svn/propedit-cmd.lo subversion/svn/propget-cmd.lo subversion/svn/proplist-cmd.lo subversion/svn/props.lo subversion/svn/propset-cmd.lo subversion/svn/relocate-cmd.lo subversion/svn/resolve-cmd.lo subversion/svn/resolved-cmd.lo subversion/svn/revert-cmd.lo subversion/svn/similarity.lo subversion/svn/status-cmd.lo subversion/svn/status.lo subversion/svn/svn.lo subversion/svn/switch-cmd.lo subversion/svn/unlock-cmd.lo subversion/svn/update-cmd.lo subversion/svn/upgrade-cmd.lo subversion/svn/util.lo subversion/libsvn_client/libsvn_client-1.la subversion/libsvn_wc/libsvn_wc-1.la subversion/libsvn_ra/libsvn_ra-1.la subversion/libsvn_delta/libsvn_delta-1.la subversion/libsvn_diff/libsvn_diff-1.la subversion/libsvn_subr/libsvn_subr-1.la
-svn_OBJECTS = add-cmd.lo auth-cmd.lo blame-cmd.lo cat-cmd.lo changelist-cmd.lo checkout-cmd.lo cl-conflicts.lo cleanup-cmd.lo commit-cmd.lo conflict-callbacks.lo copy-cmd.lo delete-cmd.lo deprecated.lo diff-cmd.lo export-cmd.lo file-merge.lo help-cmd.lo import-cmd.lo info-cmd.lo list-cmd.lo lock-cmd.lo log-cmd.lo merge-cmd.lo mergeinfo-cmd.lo mkdir-cmd.lo move-cmd.lo notify.lo patch-cmd.lo propdel-cmd.lo propedit-cmd.lo propget-cmd.lo proplist-cmd.lo props.lo propset-cmd.lo relocate-cmd.lo resolve-cmd.lo resolved-cmd.lo revert-cmd.lo similarity.lo status-cmd.lo status.lo svn.lo switch-cmd.lo unlock-cmd.lo update-cmd.lo upgrade-cmd.lo util.lo
+svn_DEPS = subversion/svn/add-cmd.lo subversion/svn/auth-cmd.lo subversion/svn/blame-cmd.lo subversion/svn/cat-cmd.lo subversion/svn/changelist-cmd.lo subversion/svn/checkout-cmd.lo subversion/svn/cl-conflicts.lo subversion/svn/clean-cmd.lo subversion/svn/cleanup-cmd.lo subversion/svn/commit-cmd.lo subversion/svn/conflict-callbacks.lo subversion/svn/copy-cmd.lo subversion/svn/delete-cmd.lo subversion/svn/deprecated.lo subversion/svn/diff-cmd.lo subversion/svn/export-cmd.lo subversion/svn/file-merge.lo subversion/svn/help-cmd.lo subversion/svn/import-cmd.lo subversion/svn/info-cmd.lo subversion/svn/list-cmd.lo subversion/svn/lock-cmd.lo subversion/svn/log-cmd.lo subversion/svn/merge-cmd.lo subversion/svn/mergeinfo-cmd.lo subversion/svn/mkdir-cmd.lo subversion/svn/move-cmd.lo subversion/svn/notify.lo subversion/svn/patch-cmd.lo subversion/svn/propdel-cmd.lo subversion/svn/propedit-cmd.lo subversion/svn/propget-cmd.lo subversion/svn/proplist-cmd.lo subversion/svn/props.lo subversion/svn/propset-cmd.lo subversion/svn/relocate-cmd.lo subversion/svn/resolve-cmd.lo subversion/svn/resolved-cmd.lo subversion/svn/revert-cmd.lo subversion/svn/similarity.lo subversion/svn/status-cmd.lo subversion/svn/status.lo subversion/svn/svn.lo subversion/svn/switch-cmd.lo subversion/svn/unlock-cmd.lo subversion/svn/update-cmd.lo subversion/svn/upgrade-cmd.lo subversion/svn/util.lo subversion/libsvn_client/libsvn_client-1.la subversion/libsvn_wc/libsvn_wc-1.la subversion/libsvn_ra/libsvn_ra-1.la subversion/libsvn_delta/libsvn_delta-1.la subversion/libsvn_diff/libsvn_diff-1.la subversion/libsvn_subr/libsvn_subr-1.la
+svn_OBJECTS = add-cmd.lo auth-cmd.lo blame-cmd.lo cat-cmd.lo changelist-cmd.lo checkout-cmd.lo cl-conflicts.lo clean-cmd.lo cleanup-cmd.lo commit-cmd.lo conflict-callbacks.lo copy-cmd.lo delete-cmd.lo deprecated.lo diff-cmd.lo export-cmd.lo file-merge.lo help-cmd.lo import-cmd.lo info-cmd.lo list-cmd.lo lock-cmd.lo log-cmd.lo merge-cmd.lo mergeinfo-cmd.lo mkdir-cmd.lo move-cmd.lo notify.lo patch-cmd.lo propdel-cmd.lo propedit-cmd.lo propget-cmd.lo proplist-cmd.lo props.lo propset-cmd.lo relocate-cmd.lo resolve-cmd.lo resolved-cmd.lo revert-cmd.lo similarity.lo status-cmd.lo status.lo svn.lo switch-cmd.lo unlock-cmd.lo update-cmd.lo upgrade-cmd.lo util.lo
 subversion/svn/svn$(EXEEXT): $(svn_DEPS)
 	cd subversion/svn && $(LINK) $(svn_LDFLAGS) -o svn$(EXEEXT)  $(svn_OBJECTS) ../../subversion/libsvn_client/libsvn_client-1.la ../../subversion/libsvn_wc/libsvn_wc-1.la ../../subversion/libsvn_ra/libsvn_ra-1.la ../../subversion/libsvn_delta/libsvn_delta-1.la ../../subversion/libsvn_diff/libsvn_diff-1.la ../../subversion/libsvn_subr/libsvn_subr-1.la $(SVN_APRUTIL_LIBS) $(SVN_APR_LIBS) $(LIBS)
 
@@ -3189,6 +3189,8 @@ subversion/svn/checkout-cmd.lo: subversion/svn/checkout-cmd.c subversion/include
 
 subversion/svn/cl-conflicts.lo: subversion/svn/cl-conflicts.c subversion/include/private/svn_debug.h subversion/include/private/svn_token.h subversion/include/svn_auth.h subversion/include/svn_checksum.h subversion/include/svn_client.h subversion/include/svn_cmdline.h subversion/include/svn_config.h subversion/include/svn_delta.h subversion/include/svn_diff.h subversion/include/svn_dirent_uri.h subversion/include/svn_error.h subversion/include/svn_error_codes.h subversion/include/svn_hash.h subversion/include/svn_io.h subversion/include/svn_mergeinfo.h subversion/include/svn_opt.h subversion/include/svn_path.h subversion/include/svn_ra.h subversion/include/svn_string.h subversion/include/svn_types.h subversion/include/svn_wc.h subversion/include/svn_xml.h subversion/svn/cl-conflicts.h subversion/svn/cl.h subversion/svn_private_config.h
 
+subversion/svn/clean-cmd.lo: subversion/svn/clean-cmd.c subversion/include/private/svn_debug.h subversion/include/private/svn_diff_tree.h subversion/include/private/svn_wc_private.h subversion/include/svn_auth.h subversion/include/svn_checksum.h subversion/include/svn_client.h subversion/include/svn_cmdline.h subversion/include/svn_config.h subversion/include/svn_delta.h subversion/include/svn_diff.h subversion/include/svn_dirent_uri.h subversion/include/svn_error.h subversion/include/svn_error_codes.h subversion/include/svn_hash.h subversion/include/svn_io.h subversion/include/svn_mergeinfo.h subversion/include/svn_opt.h subversion/include/svn_path.h subversion/include/svn_pools.h subversion/include/svn_ra.h subversion/include/svn_string.h subversion/include/svn_types.h subversion/include/svn_wc.h subversion/include/svn_xml.h subversion/svn/cl.h subversion/svn_private_config.h
+
 subversion/svn/cleanup-cmd.lo: subversion/svn/cleanup-cmd.c subversion/include/private/svn_debug.h subversion/include/svn_auth.h subversion/include/svn_checksum.h subversion/include/svn_client.h subversion/include/svn_cmdline.h subversion/include/svn_config.h subversion/include/svn_delta.h subversion/include/svn_diff.h subversion/include/svn_dirent_uri.h subversion/include/svn_error.h subversion/include/svn_error_codes.h subversion/include/svn_io.h subversion/include/svn_mergeinfo.h subversion/include/svn_opt.h subversion/include/svn_path.h subversion/include/svn_pools.h subversion/include/svn_ra.h subversion/include/svn_string.h subversion/include/svn_types.h subversion/include/svn_wc.h subversion/svn/cl.h subversion/svn_private_config.h
 
 subversion/svn/commit-cmd.lo: subversion/svn/commit-cmd.c subversion/include/private/svn_debug.h subversion/include/svn_auth.h subversion/include/svn_checksum.h subversion/include/svn_client.h subversion/include/svn_cmdline.h subversion/include/svn_config.h subversion/include/svn_delta.h subversion/include/svn_diff.h subversion/include/svn_dirent_uri.h subversion/include/svn_error.h subversion/include/svn_error_codes.h subversion/include/svn_hash.h subversion/include/svn_io.h subversion/include/svn_mergeinfo.h subversion/include/svn_opt.h subversion/include/svn_path.h subversion/include/svn_ra.h subversion/include/svn_string.h subversion/include/svn_types.h subversion/include/svn_wc.h subversion/svn/cl.h subversion/svn_private_config.h
diff --git a/subversion/include/private/svn_cmdline_private.h b/subversion/include/private/svn_cmdline_private.h
index f21a5d2..477bf7e 100644
--- a/subversion/include/private/svn_cmdline_private.h
+++ b/subversion/include/private/svn_cmdline_private.h
@@ -200,6 +200,8 @@ svn_cmdline__edit_string_externally(svn_string_t **edited_contents,
                                     apr_hash_t *config,
                                     svn_boolean_t as_text,
                                     const char *encoding,
+                                    svn_boolean_t verbose,
+                                    const apr_array_header_t *commit_items,
                                     apr_pool_t *pool);
 
 
diff --git a/subversion/include/private/svn_color.h b/subversion/include/private/svn_color.h
new file mode 100644
index 0000000..ed8bbff
--- /dev/null
+++ b/subversion/include/private/svn_color.h
@@ -0,0 +1,16 @@
+#ifndef SVN_COLOR_H
+#define SVN_COLOR_H
+
+#define SVN_USE_COLOR_MAGIC   0x8a3f
+#define SVN_COLOR_RED          "\033[31m"
+#define SVN_COLOR_GREEN        "\033[32m"
+#define SVN_COLOR_BLUE         "\033[34m"
+#define SVN_COLOR_YELLOW       "\033[33m"
+#define SVN_COLOR_MAGENTA      "\033[35m"
+#define SVN_COLOR_CYAN         "\033[36m"
+#define SVN_COLOR_RESET        "\033[m"
+
+extern svn_boolean_t dont_use_color;
+extern int tty_fileno;
+
+#endif /* SVN_COLOR_H */
diff --git a/subversion/include/private/svn_sqlite.h b/subversion/include/private/svn_sqlite.h
index 4c6cb97..aa9bcc1 100644
--- a/subversion/include/private/svn_sqlite.h
+++ b/subversion/include/private/svn_sqlite.h
@@ -129,6 +129,9 @@ svn_sqlite__open(svn_sqlite__db_t **db, const char *path,
                  apr_int32_t timeout,
                  apr_pool_t *result_pool, apr_pool_t *scratch_pool);
 
+svn_error_t *
+svn_sqlite__open_file(svn_sqlite__db_t *, const char *, apr_pool_t *);
+
 /* Explicitly close the connection in DB. */
 svn_error_t *
 svn_sqlite__close(svn_sqlite__db_t *db);
@@ -159,6 +162,11 @@ svn_error_t *
 svn_sqlite__get_statement(svn_sqlite__stmt_t **stmt, svn_sqlite__db_t *db,
                           int stmt_idx);
 
+svn_error_t *
+read_svn_ignore(svn_sqlite__db_t *sdb,
+		char **res,
+		apr_pool_t *result_pool,
+		apr_pool_t *scratch_pool);
 
 /* ---------------------------------------------------------------------
 
diff --git a/subversion/include/svn_client.h b/subversion/include/svn_client.h
index cb0f49d..2e11d2e 100644
--- a/subversion/include/svn_client.h
+++ b/subversion/include/svn_client.h
@@ -534,6 +534,14 @@ typedef struct svn_client_commit_item3_t
    */
   const char *moved_from_abspath;
 
+  /**
+   * When processing commit, this contains the relative path that relative to
+   * CWD when getting log message from external editor. #NULL until generating
+   * log message template and verbose enabled.
+   * @since New in 1.8.
+   */
+  const char *diff_relpath;
+
 } svn_client_commit_item3_t;
 
 /** The commit candidate structure.
@@ -2569,6 +2577,22 @@ svn_client_status6(svn_revnum_t *result_rev,
                    void *status_baton,
                    apr_pool_t *scratch_pool);
 
+svn_error_t *
+svn_client_clean(svn_revnum_t *result_rev,
+                   svn_client_ctx_t *ctx,
+                   const char *path,
+                   const svn_opt_revision_t *revision,
+                   svn_depth_t depth,
+                   svn_boolean_t get_all,
+                   svn_boolean_t check_out_of_date,
+                   svn_boolean_t check_working_copy,
+                   svn_boolean_t no_ignore,
+                   svn_boolean_t ignore_externals,
+                   svn_boolean_t depth_as_sticky,
+                   const apr_array_header_t *changelists,
+                   svn_client_status_func_t status_func,
+                   void *status_baton,
+                   apr_pool_t *scratch_pool);
 
 /**
  * Same as svn_client_status6(), but with @a check_out_of_date set to
@@ -3115,6 +3139,29 @@ svn_client_diff6(const apr_array_header_t *diff_options,
                  svn_client_ctx_t *ctx,
                  apr_pool_t *pool);
 
+svn_error_t *
+svn_client_diff6_diffstat(const apr_array_header_t *diff_options,
+                 const char *path_or_url1,
+                 const svn_opt_revision_t *revision1,
+                 const char *path_or_url2,
+                 const svn_opt_revision_t *revision2,
+                 const char *relative_to_dir,
+                 svn_depth_t depth,
+                 svn_boolean_t ignore_ancestry,
+                 svn_boolean_t no_diff_added,
+                 svn_boolean_t no_diff_deleted,
+                 svn_boolean_t show_copies_as_adds,
+                 svn_boolean_t ignore_content_type,
+                 svn_boolean_t ignore_properties,
+                 svn_boolean_t properties_only,
+                 svn_boolean_t use_git_diff_format,
+                 const char *header_encoding,
+                 svn_stream_t *outstream,
+                 svn_stream_t *errstream,
+                 const apr_array_header_t *changelists,
+                 svn_client_ctx_t *ctx,
+                 apr_pool_t *pool);
+
 /** Similar to svn_client_diff6(), but with @a outfile and @a errfile,
  * instead of @a outstream and @a errstream, and with @a
  * no_diff_added, @a ignore_properties, and @a properties_only always
@@ -3279,6 +3326,31 @@ svn_client_diff_peg6(const apr_array_header_t *diff_options,
                      svn_client_ctx_t *ctx,
                      apr_pool_t *pool);
 
+
+svn_error_t *
+svn_client_diff_peg6_diffstat(const apr_array_header_t *diff_options,
+                     const char *path_or_url,
+                     const svn_opt_revision_t *peg_revision,
+                     const svn_opt_revision_t *start_revision,
+                     const svn_opt_revision_t *end_revision,
+                     const char *relative_to_dir,
+                     svn_depth_t depth,
+                     svn_boolean_t ignore_ancestry,
+                     svn_boolean_t no_diff_added,
+                     svn_boolean_t no_diff_deleted,
+                     svn_boolean_t show_copies_as_adds,
+                     svn_boolean_t ignore_content_type,
+                     svn_boolean_t ignore_properties,
+                     svn_boolean_t properties_only,
+                     svn_boolean_t use_git_diff_format,
+                     const char *header_encoding,
+                     svn_stream_t *outstream,
+                     svn_stream_t *errstream,
+                     const apr_array_header_t *changelists,
+                     svn_client_ctx_t *ctx,
+                     apr_pool_t *pool);
+
+
 /** Similar to svn_client_diff6_peg6(), but with @a outfile and @a errfile,
  * instead of @a outstream and @a errstream, and with @a
  * no_diff_added, @a ignore_properties, and @a properties_only always
diff --git a/subversion/include/svn_diff.h b/subversion/include/svn_diff.h
index 5b8f8d7..bfb7ee4 100644
--- a/subversion/include/svn_diff.h
+++ b/subversion/include/svn_diff.h
@@ -81,6 +81,8 @@ svn_diff_version(void);
  */
 typedef struct svn_diff_t svn_diff_t;
 
+typedef struct svn_dfstat_ctx_s svn_dfstat_ctx_t;
+
 /**
  * There are four types of datasources.  In GNU diff3 terminology,
  * the first three types correspond to the phrases "older", "mine",
@@ -477,7 +479,7 @@ typedef struct svn_diff_file_options_t
   /** Whether the "@@" lines of the unified diff output should include a prefix
     * of the nearest preceding line that starts with a character that might be
     * the initial character of a C language identifier.  The default is
-    * @c FALSE.
+    * @c TRUE.
     * @since New in 1.5.
     */
   svn_boolean_t show_c_function;
@@ -1293,6 +1295,28 @@ svn_error_t *
 svn_diff_close_patch_file(svn_patch_file_t *patch_file,
                           apr_pool_t *scratch_pool);
 
+
+svn_error_t *
+svn_diff_create_dfctx(svn_dfstat_ctx_t **ctx);
+
+void
+svn_diff_destroy_dfctx(svn_dfstat_ctx_t *ctx);
+
+enum svn_dfstat_cmt {
+	svn_dfstat_normal = 0,
+	svn_dfstat_bin,
+};
+
+svn_error_t *
+svn_diff_stat(svn_dfstat_ctx_t *ctx,
+    const svn_diff_t *diff,
+    const char *file_path,
+    enum svn_dfstat_cmt cmt);
+
+svn_error_t *
+svn_diff_output_dfstat(svn_stream_t *out,
+    svn_dfstat_ctx_t *head);
+
 #ifdef __cplusplus
 }
 #endif /* __cplusplus */
diff --git a/subversion/include/svn_version.h b/subversion/include/svn_version.h
index 39f7154..ed42f3c 100644
--- a/subversion/include/svn_version.h
+++ b/subversion/include/svn_version.h
@@ -354,6 +354,18 @@ svn_version_ext_build_time(const svn_version_extended_t *ext_info);
 const char *
 svn_version_ext_build_host(const svn_version_extended_t *ext_info);
 
+/**
+ * Accessor for svn_version_extended_t.
+ *
+ * @return The name of person who modifies subversion's source code.
+ *
+ * @note Maybe empty.
+ *
+ * @since New in 1.9.
+ */
+const char *
+svn_version_ext_build_hacker(const svn_version_extended_t *ext_info);
+
 /**
  * Accessor for svn_version_extended_t.
  *
diff --git a/subversion/libsvn_client/commit.c b/subversion/libsvn_client/commit.c
index 4a945c8..f63a2e3 100644
--- a/subversion/libsvn_client/commit.c
+++ b/subversion/libsvn_client/commit.c
@@ -798,6 +798,14 @@ svn_client_commit6(const apr_array_header_t *targets,
         }
     }
 
+  /* Sort and condense our COMMIT_ITEMS. */
+  cmt_err = svn_error_trace(svn_client__condense_commit_items(&base_url,
+                                                              commit_items,
+                                                              pool));
+
+  if (cmt_err)
+    goto cleanup;
+
   /* Go get a log message.  If an error occurs, or no log message is
      specified, abort the operation. */
   if (SVN_CLIENT__HAS_LOG_MSG_FUNC(ctx))
@@ -813,14 +821,6 @@ svn_client_commit6(const apr_array_header_t *targets,
   else
     log_msg = "";
 
-  /* Sort and condense our COMMIT_ITEMS. */
-  cmt_err = svn_error_trace(svn_client__condense_commit_items(&base_url,
-                                                              commit_items,
-                                                              pool));
-
-  if (cmt_err)
-    goto cleanup;
-
   /* Collect our lock tokens with paths relative to base_url. */
   cmt_err = svn_error_trace(collect_lock_tokens(&lock_tokens, lock_tokens,
                                                 base_url, pool));
diff --git a/subversion/libsvn_client/diff.c b/subversion/libsvn_client/diff.c
index 4817ffd..b47cbcc 100644
--- a/subversion/libsvn_client/diff.c
+++ b/subversion/libsvn_client/diff.c
@@ -53,6 +53,7 @@
 #include "private/svn_subr_private.h"
 #include "private/svn_io_private.h"
 #include "private/svn_ra_private.h"
+#include "private/svn_color.h"
 
 #include "svn_private_config.h"
 
@@ -476,10 +477,16 @@ display_prop_diffs(const apr_array_header_t *propchanges,
       /* ### Should we show the paths in platform specific format,
        * ### diff_content_changed() does not! */
 
-      SVN_ERR(svn_stream_printf_from_utf8(outstream, encoding, scratch_pool,
-                                          "Index: %s" APR_EOL_STR
-                                          SVN_DIFF__EQUAL_STRING APR_EOL_STR,
-                                          index_path));
+      if (!dont_use_color)
+        SVN_ERR(svn_stream_printf_from_utf8(outstream, encoding, scratch_pool,
+			      SVN_COLOR_BLUE "Index: %s%s" APR_EOL_STR
+			      SVN_DIFF__EQUAL_STRING APR_EOL_STR,
+			      SVN_COLOR_BLUE, index_path));
+      else
+        SVN_ERR(svn_stream_printf_from_utf8(outstream, encoding, scratch_pool,
+			      "Index: %s" APR_EOL_STR
+			      SVN_DIFF__EQUAL_STRING APR_EOL_STR,
+			      index_path));
 
       if (use_git_diff_format)
         SVN_ERR(print_git_diff_header(outstream, &label1, &label2,
@@ -588,6 +595,9 @@ typedef struct diff_writer_info_t
   /* Whether to ignore copyfrom information when showing adds */
   svn_boolean_t show_copies_as_adds;
 
+  svn_boolean_t diffstat;
+  svn_dfstat_ctx_t *dfstat_ctx;
+
   /* Empty files for creating diffs or NULL if not used yet */
   const char *empty_file;
 
@@ -699,14 +709,21 @@ diff_content_changed(svn_boolean_t *wrote_header,
   if (mimetype2)
     mt2_binary = svn_mime_type_is_binary(mimetype2);
 
-  if (! dwi->force_binary && (mt1_binary || mt2_binary))
+  if (! dwi->force_binary && (mt1_binary || mt2_binary) && !dwi->diffstat)
     {
       /* Print out the diff header. */
-      SVN_ERR(svn_stream_printf_from_utf8(outstream,
-               dwi->header_encoding, scratch_pool,
-               "Index: %s" APR_EOL_STR
-               SVN_DIFF__EQUAL_STRING APR_EOL_STR,
-               index_path));
+      if (!dont_use_color)
+        SVN_ERR(svn_stream_printf_from_utf8(outstream,
+		 dwi->header_encoding, scratch_pool,
+		 SVN_COLOR_BLUE "Index: %s%s" APR_EOL_STR
+		 SVN_DIFF__EQUAL_STRING APR_EOL_STR,
+		 SVN_COLOR_BLUE, index_path));
+      else
+        SVN_ERR(svn_stream_printf_from_utf8(outstream,
+		 dwi->header_encoding, scratch_pool,
+		 "Index: %s" APR_EOL_STR
+		 SVN_DIFF__EQUAL_STRING APR_EOL_STR,
+		 index_path));
 
       /* ### Print git diff headers. */
 
@@ -780,6 +797,12 @@ diff_content_changed(svn_boolean_t *wrote_header,
       /* Exit early. */
       return SVN_NO_ERROR;
     }
+  else if (! dwi->force_binary && (mt1_binary || mt2_binary) && dwi->diffstat)
+    {
+      /* Suppress binary files' warning */
+      SVN_ERR(svn_diff_stat(dwi->dfstat_ctx, NULL, diff_relpath, svn_dfstat_bin));
+      return SVN_NO_ERROR;
+    }
 
 
   if (dwi->diff_cmd)
@@ -855,6 +878,16 @@ diff_content_changed(svn_boolean_t *wrote_header,
       if (exitcode == 1)
         *wrote_header = TRUE;
     }
+  else if (dwi->diffstat) /* Display diff statistics */
+    {
+      svn_diff_t *diff;
+
+      SVN_ERR(svn_diff_file_diff_2(&diff, tmpfile1, tmpfile2,
+            dwi->options.for_internal,
+            scratch_pool));
+      if (svn_diff_contains_diffs(diff))
+        SVN_ERR(svn_diff_stat(dwi->dfstat_ctx, diff, diff_relpath, 0));
+    }
   else   /* use libsvn_diff to generate the diff  */
     {
       svn_diff_t *diff;
@@ -862,17 +895,23 @@ diff_content_changed(svn_boolean_t *wrote_header,
       SVN_ERR(svn_diff_file_diff_2(&diff, tmpfile1, tmpfile2,
                                    dwi->options.for_internal,
                                    scratch_pool));
-
       if (force_diff
           || dwi->use_git_diff_format
           || svn_diff_contains_diffs(diff))
         {
           /* Print out the diff header. */
-          SVN_ERR(svn_stream_printf_from_utf8(outstream,
-                   dwi->header_encoding, scratch_pool,
-                   "Index: %s" APR_EOL_STR
-                   SVN_DIFF__EQUAL_STRING APR_EOL_STR,
-                   index_path));
+	  if (!dont_use_color)
+            SVN_ERR(svn_stream_printf_from_utf8(outstream,
+		     dwi->header_encoding, scratch_pool,
+		     SVN_COLOR_BLUE "Index: %s%s" APR_EOL_STR
+		     SVN_DIFF__EQUAL_STRING APR_EOL_STR,
+		     SVN_COLOR_BLUE, index_path));
+          else
+            SVN_ERR(svn_stream_printf_from_utf8(outstream,
+		     dwi->header_encoding, scratch_pool,
+		     "Index: %s" APR_EOL_STR
+		     SVN_DIFF__EQUAL_STRING APR_EOL_STR,
+		     index_path));
 
           if (dwi->use_git_diff_format)
             {
@@ -1017,11 +1056,18 @@ diff_file_added(const char *relpath,
         index_path = svn_dirent_join(dwi->ddi.anchor, relpath,
                                      scratch_pool);
 
-      SVN_ERR(svn_stream_printf_from_utf8(dwi->outstream,
-                dwi->header_encoding, scratch_pool,
-                "Index: %s (added)" APR_EOL_STR
-                SVN_DIFF__EQUAL_STRING APR_EOL_STR,
-                index_path));
+      if (!dont_use_color)
+        SVN_ERR(svn_stream_printf_from_utf8(dwi->outstream,
+                  dwi->header_encoding, scratch_pool,
+                  SVN_COLOR_BLUE "Index: %s%s (added)" APR_EOL_STR
+                  SVN_DIFF__EQUAL_STRING APR_EOL_STR,
+                  SVN_COLOR_BLUE, index_path));
+      else
+        SVN_ERR(svn_stream_printf_from_utf8(dwi->outstream,
+                  dwi->header_encoding, scratch_pool,
+                  "Index: %s (added)" APR_EOL_STR
+                  SVN_DIFF__EQUAL_STRING APR_EOL_STR,
+                  index_path));
       wrote_header = TRUE;
     }
   else if (copyfrom_source && right_file)
@@ -1084,11 +1130,18 @@ diff_file_deleted(const char *relpath,
         index_path = svn_dirent_join(dwi->ddi.anchor, relpath,
                                      scratch_pool);
 
-      SVN_ERR(svn_stream_printf_from_utf8(dwi->outstream,
-                dwi->header_encoding, scratch_pool,
-                "Index: %s (deleted)" APR_EOL_STR
-                SVN_DIFF__EQUAL_STRING APR_EOL_STR,
-                index_path));
+      if (!dont_use_color)
+        SVN_ERR(svn_stream_printf_from_utf8(dwi->outstream,
+                  dwi->header_encoding, scratch_pool,
+                  SVN_COLOR_BLUE "Index: %s%s (deleted)" APR_EOL_STR
+                  SVN_DIFF__EQUAL_STRING APR_EOL_STR,
+                  SVN_COLOR_BLUE, index_path));
+      else
+        SVN_ERR(svn_stream_printf_from_utf8(dwi->outstream,
+                  dwi->header_encoding, scratch_pool,
+                  "Index: %s (deleted)" APR_EOL_STR
+                  SVN_DIFF__EQUAL_STRING APR_EOL_STR,
+                  index_path));
     }
   else
     {
@@ -2421,6 +2474,98 @@ svn_client_diff6(const apr_array_header_t *options,
                                  diff_processor, ctx, pool, pool));
 }
 
+svn_error_t *
+svn_client_diff6_diffstat(const apr_array_header_t *options,
+                 const char *path_or_url1,
+                 const svn_opt_revision_t *revision1,
+                 const char *path_or_url2,
+                 const svn_opt_revision_t *revision2,
+                 const char *relative_to_dir,
+                 svn_depth_t depth,
+                 svn_boolean_t ignore_ancestry,
+                 svn_boolean_t no_diff_added,
+                 svn_boolean_t no_diff_deleted,
+                 svn_boolean_t show_copies_as_adds,
+                 svn_boolean_t ignore_content_type,
+                 svn_boolean_t ignore_properties,
+                 svn_boolean_t properties_only,
+                 svn_boolean_t use_git_diff_format,
+                 const char *header_encoding,
+                 svn_stream_t *outstream,
+                 svn_stream_t *errstream,
+                 const apr_array_header_t *changelists,
+                 svn_client_ctx_t *ctx,
+                 apr_pool_t *pool)
+{
+  diff_writer_info_t dwi = { 0 };
+  svn_opt_revision_t peg_revision;
+  const svn_diff_tree_processor_t *diff_processor;
+  svn_diff_tree_processor_t *processor;
+
+  if (ignore_properties && properties_only)
+    return svn_error_create(SVN_ERR_INCORRECT_PARAMS, NULL,
+                            _("Cannot ignore properties and show only "
+                              "properties at the same time"));
+
+  /* We will never do a pegged diff from here. */
+  peg_revision.kind = svn_opt_revision_unspecified;
+
+  /* setup callback and baton */
+  dwi.ddi.orig_path_1 = path_or_url1;
+  dwi.ddi.orig_path_2 = path_or_url2;
+
+  SVN_ERR(create_diff_writer_info(&dwi, options,
+                                  ctx->config, pool));
+  dwi.pool = pool;
+  dwi.outstream = outstream;
+  dwi.errstream = errstream;
+  dwi.header_encoding = header_encoding;
+
+  dwi.force_binary = ignore_content_type;
+  dwi.ignore_properties = ignore_properties;
+  dwi.properties_only = properties_only;
+  dwi.relative_to_dir = relative_to_dir;
+  dwi.use_git_diff_format = use_git_diff_format;
+  dwi.no_diff_added = no_diff_added;
+  dwi.no_diff_deleted = no_diff_deleted;
+  dwi.show_copies_as_adds = show_copies_as_adds;
+  dwi.diffstat = TRUE;
+  SVN_ERR(svn_diff_create_dfctx(&dwi.dfstat_ctx));
+
+  dwi.cancel_func = ctx->cancel_func;
+  dwi.cancel_baton = ctx->cancel_baton;
+
+  dwi.wc_ctx = ctx->wc_ctx;
+  dwi.ddi.session_relpath = NULL;
+  dwi.ddi.anchor = NULL;
+
+  processor = svn_diff__tree_processor_create(&dwi, pool);
+
+  processor->dir_added = diff_dir_added;
+  processor->dir_changed = diff_dir_changed;
+  processor->dir_deleted = diff_dir_deleted;
+
+  processor->file_added = diff_file_added;
+  processor->file_changed = diff_file_changed;
+  processor->file_deleted = diff_file_deleted;
+
+  diff_processor = processor;
+
+  /* --show-copies-as-adds and --git imply --notice-ancestry */
+  if (show_copies_as_adds || use_git_diff_format)
+    ignore_ancestry = FALSE;
+
+  SVN_ERR(do_diff(NULL, NULL, &dwi.ddi,
+                                 path_or_url1, path_or_url2,
+                                 revision1, revision2, &peg_revision,
+                                 depth, ignore_ancestry, changelists,
+                                 TRUE /* text_deltas */,
+                                 diff_processor, ctx, pool, pool));
+  SVN_ERR(svn_diff_output_dfstat(outstream, dwi.dfstat_ctx));
+  svn_diff_destroy_dfctx(dwi.dfstat_ctx);
+  return SVN_NO_ERROR;
+}
+
 svn_error_t *
 svn_client_diff_peg6(const apr_array_header_t *options,
                      const char *path_or_url,
@@ -2504,6 +2649,95 @@ svn_client_diff_peg6(const apr_array_header_t *options,
                                  diff_processor, ctx, pool, pool));
 }
 
+svn_error_t *
+svn_client_diff_peg6_diffstat(const apr_array_header_t *options,
+                     const char *path_or_url,
+                     const svn_opt_revision_t *peg_revision,
+                     const svn_opt_revision_t *start_revision,
+                     const svn_opt_revision_t *end_revision,
+                     const char *relative_to_dir,
+                     svn_depth_t depth,
+                     svn_boolean_t ignore_ancestry,
+                     svn_boolean_t no_diff_added,
+                     svn_boolean_t no_diff_deleted,
+                     svn_boolean_t show_copies_as_adds,
+                     svn_boolean_t ignore_content_type,
+                     svn_boolean_t ignore_properties,
+                     svn_boolean_t properties_only,
+                     svn_boolean_t use_git_diff_format,
+                     const char *header_encoding,
+                     svn_stream_t *outstream,
+                     svn_stream_t *errstream,
+                     const apr_array_header_t *changelists,
+                     svn_client_ctx_t *ctx,
+                     apr_pool_t *pool)
+{
+  diff_writer_info_t dwi = { 0 };
+  const svn_diff_tree_processor_t *diff_processor;
+  svn_diff_tree_processor_t *processor;
+
+  if (ignore_properties && properties_only)
+    return svn_error_create(SVN_ERR_INCORRECT_PARAMS, NULL,
+                            _("Cannot ignore properties and show only "
+                              "properties at the same time"));
+
+  /* setup callback and baton */
+  dwi.ddi.orig_path_1 = path_or_url;
+  dwi.ddi.orig_path_2 = path_or_url;
+
+  SVN_ERR(create_diff_writer_info(&dwi, options,
+                                  ctx->config, pool));
+  dwi.pool = pool;
+  dwi.outstream = outstream;
+  dwi.errstream = errstream;
+  dwi.header_encoding = header_encoding;
+
+  dwi.force_binary = ignore_content_type;
+  dwi.ignore_properties = ignore_properties;
+  dwi.properties_only = properties_only;
+  dwi.relative_to_dir = relative_to_dir;
+  dwi.use_git_diff_format = use_git_diff_format;
+  dwi.no_diff_added = no_diff_added;
+  dwi.no_diff_deleted = no_diff_deleted;
+  dwi.show_copies_as_adds = show_copies_as_adds;
+  dwi.diffstat = TRUE;
+  SVN_ERR(svn_diff_create_dfctx(&dwi.dfstat_ctx));
+
+  dwi.cancel_func = ctx->cancel_func;
+  dwi.cancel_baton = ctx->cancel_baton;
+
+  dwi.wc_ctx = ctx->wc_ctx;
+  dwi.ddi.session_relpath = NULL;
+  dwi.ddi.anchor = NULL;
+
+  processor = svn_diff__tree_processor_create(&dwi, pool);
+
+  processor->dir_added = diff_dir_added;
+  processor->dir_changed = diff_dir_changed;
+  processor->dir_deleted = diff_dir_deleted;
+
+  processor->file_added = diff_file_added;
+  processor->file_changed = diff_file_changed;
+  processor->file_deleted = diff_file_deleted;
+
+  diff_processor = processor;
+
+  /* --show-copies-as-adds and --git imply --notice-ancestry */
+  if (show_copies_as_adds || use_git_diff_format)
+    ignore_ancestry = FALSE;
+
+  SVN_ERR(do_diff(NULL, NULL, &dwi.ddi,
+                                 path_or_url, path_or_url,
+                                 start_revision, end_revision, peg_revision,
+                                 depth, ignore_ancestry, changelists,
+                                 TRUE /* text_deltas */,
+                                 diff_processor, ctx, pool, pool));
+  SVN_ERR(svn_diff_output_dfstat(outstream, dwi.dfstat_ctx));
+  svn_diff_destroy_dfctx(dwi.dfstat_ctx);
+  return SVN_NO_ERROR;
+}
+
+
 svn_error_t *
 svn_client_diff_summarize2(const char *path_or_url1,
                            const svn_opt_revision_t *revision1,
diff --git a/subversion/libsvn_diff/diff.c b/subversion/libsvn_diff/diff.c
index f43a3be..5dafda2 100644
--- a/subversion/libsvn_diff/diff.c
+++ b/subversion/libsvn_diff/diff.c
@@ -32,6 +32,7 @@
 #include "svn_types.h"
 
 #include "diff.h"
+#include "private/svn_color.h"
 
 
 svn_diff__token_index_t*
@@ -197,3 +198,847 @@ svn_diff_diff_2(svn_diff_t **diff,
 
   return SVN_NO_ERROR;
 }
+
+
+
+/******************************************************************************
+ * Copyright 1994-2015,2016 by Thomas E. Dickey                               *
+ * All Rights Reserved.                                                       *
+ *                                                                            *
+ * Permission to use, copy, modify, and distribute this software and its      *
+ * documentation for any purpose and without fee is hereby granted, provided  *
+ * that the above copyright notice appear in all copies and that both that    *
+ * copyright notice and this permission notice appear in supporting           *
+ * documentation, and that the name of the above listed copyright holder(s)   *
+ * not be used in advertising or publicity pertaining to distribution of the  *
+ * software without specific, written prior permission.                       *
+ *                                                                            *
+ * THE ABOVE LISTED COPYRIGHT HOLDER(S) DISCLAIM ALL WARRANTIES WITH REGARD   *
+ * TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND  *
+ * FITNESS, IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE  *
+ * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES          *
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN      *
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR *
+ * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                *
+ ******************************************************************************/
+
+#ifndef	NO_IDENT
+static const char *Id = "$Id: diffstat.c,v 1.61 2016/01/14 00:52:29 tom Exp $";
+#endif
+
+/*
+ * Title:	diffstat.c
+ * Author:	T.E.Dickey
+ * Created:	02 Feb 1992
+ * Modified:
+ *		14 Jan 2016, extend -S option to count unmodified files.
+ *			     add -T option to show values with histogram
+ *		06 Jul 2015, handle double-quotes, e.g., from diffutils 3.3
+ *			     when filenames have embedded spaces.
+ *		05 Jun 2014, add -E option to filter colordiff output.
+ *		28 Oct 2013, portability improvements for MinGW.
+ *		15 Apr 2013, modify to accommodate output of "diff -q", which
+ *			     tells only if the files are different.  Work
+ *			     around the equivalent ambiguous message introduced
+ *			     in diffutils 2.8.4 and finally removed for 3.0
+ *		11 Feb 2013, add -K option.  Use strtol() to provide error
+ *			     checking of optarg values.
+ *		10 Feb 2013, document -b, -C, -s option in usage (patch by
+ *			     Tim Waugh, Red Hat #852770).  Improve pathname
+ *			     merging.
+ *		02 Jun 2012, fix for svn diff with spaces in path (patch by
+ *			     Stuart Prescott, Debian #675465).
+ *		03 Jan 2012, Correct case for "xz" suffix in is_compressed()
+ *			     (patch from Frederic Culot in FreeBSD ports).  Add
+ *			     "-R" option.  Improve dequoting of filenames in
+ *			     headers.
+ *		10 Oct 2010, correct display of new files when -S/-D options
+ *			     are used.  Remove the temporary directory on
+ *			     error, introduced in 1.48+ (patch by Solar
+ *			     Designer).
+ *		19 Jul 2010, add missing "break" statement which left "-c"
+ *			     option falling-through into "-C".
+ *		16 Jul 2010, configure "xz" path explicitly, in case lzcat
+ *			     does not support xz format.  Add "-s" (summary)
+ *			     and "-C" (color) options.
+ *		15 Jul 2010, fix strict gcc warnings, e.g., using const.
+ *		10 Jan 2010, improve a case where filenames have embedded blanks
+ *			     (patch by Reinier Post).
+ *		07 Nov 2009, correct suffix-check for ".xz" files as
+ *			     command-line parameters rather than as piped
+ *			     input (report by Moritz Barsnick).
+ *		06 Oct 2009, fixes to build/run with MSYS or MinGW.  use
+ *			     $TMPDIR for path of temporary file used in
+ *			     decompression.  correct else-condition for
+ *			     detecting compression type (patch by Zach Hirsch).
+ *		31 Aug 2009, improve lzma support, add support for xz (patch by
+ *			     Eric Blake).  Add special case for no-newline
+ *			     message from some diff's (Ubuntu #269895).
+ *			     Improve configure check for getopt().
+ *		11 Aug 2009, Add logic to check standard input, decompress if
+ *			     possible.  Add -N option, to truncate long names.
+ *			     Add pack/pcat as a compression type.
+ *			     Add lzma/lzcat as a compression type.
+ *			     Allow overriding program paths with environment.
+ *		10 Aug 2009, modify to work with Perforce-style diffs (patch
+ *			     by Ed Schouten).
+ *		29 Mar 2009, modify to work with patch ".rej" files, which have
+ *			     no filename header (use the name of the ".rej"
+ *			     file if it is available).
+ *		29 Sep 2008, fix typo in usage message.
+ *		06 Aug 2008, add "-m", "-S" and "-D" options.
+ *		05 Aug 2008, add "-q" option to suppress 0-files-changed
+ *			     message (patch by Greg Norris).
+ *		04 Sep 2007, add "-b" option to suppress binary-files (patch
+ *			     by Greg Norris).
+ *		26 Aug 2007, add "-d" option to show debugging traces, rather
+ *			     than by defining DEBUG.  Add check after
+ *			     unified-diff chunk to avoid adding non-diff text
+ *			     (report by Adrian Bunk).  Quote pathname passed
+ *			     in command to gzip/uncompress.  Add a check for
+ *			     default-diff output without the "diff" command
+ *			     supplied to provide filename, mark as "unknown".
+ *		16 Jul 2006, fix to avoid modifying which is being used by
+ *			     tsearch() for ordering the binary tree (report by
+ *			     Adrian Bunk).
+ *		02 Jul 2006, do not ignore pathnames in /tmp/, since some tools
+ *			     create usable pathnames for both old/new files
+ *			     there (Debian #376086).  Correct ifdef for
+ *			     fgetc_unlocked().  Add configure check for
+ *			     compress, gzip and bzip2 programs that may be used
+ *			     to decompress files.
+ *		24 Aug 2005, update usage message for -l, -r changes.
+ *		15 Aug 2005, apply PLURAL() to num_files (Jean Delvare).
+ *			     add -l option (request by Michael Burian).
+ *			     Use fgetc_locked() if available.
+ *		14 Aug 2005, add -r2 option (rounding with adjustment to ensure
+ *			     that nonzero values always display a histogram
+ *			     bar), adapted from patch by Jean Delvare.  Extend
+ *			     the -f option (2=filled, 4=verbose).
+ *		12 Aug 2005, modify to use tsearch() for sorted lists.
+ *		11 Aug 2005, minor fixes to scaling of modified lines.  Add
+ *			     -r (round) option.
+ *		05 Aug 2005, add -t (table) option.
+ *		10 Apr 2005, change order of merging and prefix-stripping so
+ *			     stripping all prefixes, e.g., with -p9, will be
+ *			     sorted as expected (Patch by Jean Delvare
+ *			     <khali@linux-fr.org>).
+ *		10 Jan 2005, add support for '--help' and '--version' (Patch
+ *			     by Eric Blake <ebb9@byu.net>.)
+ *		16 Dec 2004, fix a different case for data beginning with "--"
+ *			     which was treated as a header line.
+ *		14 Dec 2004, Fix allocation problems.  Open files in binary
+ *			     mode for reading.  Getopt returns -1, not
+ *			     necessarily EOF.  Add const where useful.  Use
+ *			     NO_IDENT where necessary.  malloc() comes from
+ *			     <stdlib.h> in standard systems (Patch by Eric
+ *			     Blake <ebb9@byu.net>.)
+ *		08 Nov 2004, minor fix for resync of unified diffs checks for
+ *			     range (line beginning with '@' without header
+ *			     lines (successive lines beginning with "---" and
+ *			     "+++").  Fix a few problems reported by valgrind.
+ *		09 Nov 2003, modify check for lines beginning with '-' or '+'
+ *			     to treat only "---" in old-style diffs as a
+ *			     special case.
+ *		14 Feb 2003, modify check for filenames to allow for some cases
+ *			     of incomplete dates (the reported example omitted
+ *			     the day of the month).  Correct a typo in usage().
+ *			     Add -e, -h, -o options.
+ *		04 Jan 2003, improve tracking of chunks in unified diff, in
+ *			     case the original files contained a '+' or '-' in
+ *			     the first column (Debian #155000).  Add -v option
+ *			     (Debian #170947).  Modify to allocate buffers big
+ *			     enough for long input lines.  Do additional
+ *			     merging to handle unusual Index/diff constructs in
+ *			     recent makepatch script.
+ *		20 Aug 2002, add -u option to tell diffstat to preserve the
+ *			     order of filenames as given rather than sort them
+ *			     (request by H Peter Anvin <hpa@zytor.com>).  Add
+ *			     -k option for completeness.
+ *		09 Aug 2002, allow either '/' or '-' as delimiters in dates,
+ *			     to accommodate diffutils 2.8 (report by Rik van
+ *			     Riel <riel@conectiva.com.br>).
+ *		10 Oct 2001, add bzip2 (.bz2) suffix as suggested by
+ *			     Gregory T Norris <haphazard@socket.net> in Debian
+ *			     bug report #82969).
+ *			     add check for diff from RCS archive where the
+ *			     "diff" lines do not reference a filename.
+ *		29 Mar 2000, add -c option.  Check for compressed input, read
+ *			     via pipe.  Change to ANSI C.  Adapted change from
+ *			     Troy Engel to add option that displays a number
+ *			     only, rather than a histogram.
+ *		17 May 1998, handle Debian diff files, which do not contain
+ *			     dates on the header lines.
+ *		16 Jan 1998, accommodate patches w/o tabs in header lines (e.g.,
+ *			     from cut/paste).  Strip suffixes such as ".orig".
+ *		24 Mar 1996, corrected -p0 logic, more fixes in do_merging.
+ *		16 Mar 1996, corrected state-change for "Binary".  Added -p
+ *			     option.
+ *		17 Dec 1995, corrected matching algorithm in 'do_merging()'
+ *		11 Dec 1995, mods to accommodate diffs against /dev/null or
+ *			     /tmp/XXX (tempfiles).
+ *		06 May 1995, limit scaling -- only shrink-to-fit.
+ *		29 Apr 1995, recognize 'rcsdiff -u' format.
+ *		26 Dec 1994, strip common pathname-prefix.
+ *		13 Nov 1994, added '-n' option.  Corrected logic of 'match'.
+ *		17 Jun 1994, ifdef-<string.h>
+ *		12 Jun 1994, recognize unified diff, and output of makepatch.
+ *		04 Oct 1993, merge multiple diff-files, busy message when the
+ *			     output is piped to a file.
+ *
+ * Function:	this program reads the output of 'diff' and displays a histogram
+ *		of the insertions/deletions/modifications per-file.
+ */
+
+#if defined(HAVE_CONFIG_H)
+#include <config.h>
+#endif
+
+#if defined(WIN32) && !defined(HAVE_CONFIG_H)
+#define HAVE_STDLIB_H
+#define HAVE_STRING_H
+#define HAVE_MALLOC_H
+#define HAVE_GETOPT_H
+#endif
+
+#include <stdio.h>
+#include <ctype.h>
+
+#ifdef HAVE_STRING_H
+#include <string.h>
+#else
+#include <strings.h>
+#define strchr index
+#define strrchr rindex
+#endif
+
+#ifdef HAVE_STDLIB_H
+#include <stdlib.h>
+#else
+extern int atoi(const char *);
+#endif
+
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>
+#else
+extern int isatty(int);
+#endif
+
+#ifdef HAVE_OPENDIR
+#include <dirent.h>
+#endif
+
+#ifdef HAVE_MALLOC_H
+#include <malloc.h>
+#endif
+
+#if defined(HAVE_SEARCH_H) && defined(HAVE_TSEARCH)
+#include <search.h>
+#else
+#undef HAVE_TSEARCH
+#endif
+
+#ifdef HAVE_GETC_UNLOCKED
+#define MY_GETC getc_unlocked
+#else
+#define MY_GETC getc
+#endif
+
+#ifdef HAVE_GETOPT_H
+#include <getopt.h>
+#elif !defined(HAVE_GETOPT_HEADER)
+extern int getopt(int, char *const *, const char *);
+extern char *optarg;
+extern int optind;
+#endif
+
+#include <sys/types.h>
+#include <sys/stat.h>
+
+#if defined(HAVE_POPEN) && !defined(HAVE_POPEN_PROTOTYPE)
+extern FILE *popen(const char *, const char *);
+extern int pclose(FILE *);
+#endif
+
+#if !defined(EXIT_SUCCESS)
+#define EXIT_SUCCESS 0
+#define EXIT_FAILURE 1
+#endif
+
+#ifndef BZCAT_PATH
+#define BZCAT_PATH ""
+#endif
+
+#ifndef BZIP2_PATH
+#define BZIP2_PATH ""
+#endif
+
+#ifndef COMPRESS_PATH
+#define COMPRESS_PATH ""
+#endif
+
+#ifndef GZIP_PATH
+#define GZIP_PATH ""
+#endif
+
+#ifndef LZCAT_PATH
+#define LZCAT_PATH ""
+#endif
+
+#ifndef PCAT_PATH
+#define PCAT_PATH ""
+#endif
+
+#ifndef UNCOMPRESS_PATH
+#define UNCOMPRESS_PATH ""
+#endif
+
+#ifndef XZ_PATH
+#define XZ_PATH ""
+#endif
+
+#ifndef ZCAT_PATH
+#define ZCAT_PATH ""
+#endif
+
+/******************************************************************************/
+
+#if defined(__MINGW32__) || defined(WIN32)
+#define MKDIR(name,mode) mkdir(name)
+#else
+#define MKDIR(name,mode) mkdir(name,mode)
+#endif
+
+#if defined(WIN32) && !defined(__MINGW32__)
+#define PATHSEP '\\'
+#else
+#define PATHSEP '/'
+#endif
+
+#define DQUOTE  '"'
+#define SQUOTE  '\''
+#define EOS     '\0'
+#define BLANK   ' '
+
+#define UC(c)   ((unsigned char)(c))
+
+#ifndef OPT_TRACE
+#define OPT_TRACE 1
+#endif
+
+#if OPT_TRACE
+#define TRACE(p) if (trace_opt) printf p
+#else
+#define TRACE(p)		/*nothing */
+#endif
+
+#define contain_any(s,reject) (strcspn(s,reject) != strlen(s))
+#define maximum(a,b) ((a) < (b) ? (b) : (a))
+
+#define HAVE_NOTHING 0
+#define HAVE_GENERIC 1		/* e.g., "Index: foo" w/o pathname */
+#define HAVE_PATH    2		/* reference-file from "diff dirname/foo" */
+#define HAVE_PATH2   4		/* comparison-file from "diff dirname/foo" */
+
+#define FMT_CONCISE  0
+#define FMT_NORMAL   1
+#define FMT_FILLED   2
+#define FMT_VERBOSE  4
+
+typedef enum comment {
+    Normal, Only, OnlyLeft, OnlyRight, Binary, Differs, Either
+} Comment;
+
+#define MARKS 4			/* each of +, - and ! */
+
+typedef enum {
+    cInsert = 0,
+    cDelete,
+    cModify,
+    cEquals
+} Change;
+
+typedef svn_dfstat_ctx_t DATA;
+
+#define InsOf(p) (p)->inserted_num	/* "+" count inserted lines */
+#define DelOf(p) (p)->deleted_num	/* "-" count deleted lines */
+
+#define TotalOf(p) (InsOf(p) + DelOf(p))
+#define for_each_mark(n) for (n = 0; n < num_marks; ++n)
+
+
+static const char marks[MARKS + 1] = "+-!=";
+static const int colors[MARKS + 1] =
+{2, 1, 6, 4};
+
+static const char *comment_opt = "";
+static char *path_opt = 0;
+static int count_files;		/* true if we count added/deleted files */
+static int format_opt = FMT_NORMAL;
+static int max_name_wide;	/* maximum amount reserved for filenames */
+static int max_width = 80;		/* the specified width-limit */
+static int merge_names = 1;	/* true if we merge similar filenames */
+static int merge_opt = 0;	/* true if we merge ins/del as modified */
+static int min_name_wide;	/* minimum amount reserved for filenames */
+static int names_only;		/* true if we list filenames only */
+static int num_marks = 3;	/* 3 or 4, according to "-P" option */
+static int path_dest;		/* true if path_opt is destination (patched) */
+static int plot_width;		/* the amount left over for histogram */
+static int prefix_opt = 0;	/* if positive, controls stripping of PATHSEP */
+static int quiet = 0;		/* -q option */
+static int reverse_opt;		/* true if results are reversed */
+static int round_opt = 0;	/* if nonzero, round data for histogram */
+#define show_colors (!dont_use_color)	/* true if showing SGR colors */
+static int show_progress;	/* if not writing to tty, show progress */
+static int sort_names = 1;	/* true if we sort filenames */
+static int summary_only = 0;	/* true if only summary line is shown */
+static int suppress_binary = 0;	/* -b option */
+static int trim_escapes = 0;	/* -E option */
+static int table_opt = 0;	/* if 1/2, write table instead/also plot */
+static int trace_opt = 0;	/* if nonzero, write debugging information */
+static int unchanged = 0;	/* special-case for -S vs modified-files */
+static int verbose = 0;		/* -v option */
+static long plot_scale;		/* the effective scale (1:maximum) */
+
+static int number_len = 5;
+static int prefix_len = -1;
+
+/******************************************************************************/
+
+static int
+compare_data(const void *a, const void *b)
+{
+    const DATA *p = (const DATA *) a;
+    const DATA *q = (const DATA *) b;
+    return strcmp(p->file_path + p->base, q->file_path + q->base);
+}
+
+static int
+count_prefix(const char *name)
+{
+    int count = 0;
+    const char *s;
+    while ((s = strchr(name, PATHSEP)) != 0) {
+	name = s + 1;
+	++count;
+    }
+    return count;
+}
+
+static const char *
+skip_prefix(const char *name, int prefix, int *base)
+{
+    if (prefix >= 0) {
+	int n;
+	*base = 0;
+
+	for (n = prefix; n > 0; n--) {
+	    const char *s = strchr(name + *base, PATHSEP);
+	    if (s == 0 || *++s == EOS) {
+		name = s;
+		break;
+	    }
+	    *base = (int) (s - name);
+	}
+	TRACE(("** base set to %d\n", *base));
+    }
+    return name;
+}
+
+
+static void
+show_color(int color)
+{
+    if (color >= 0)
+	printf("\033[%dm", color + 30);
+    else
+	printf("\033[0;39m");
+}
+
+static long
+plot_bar(long count, int c, int color)
+{
+    long result = count;
+
+    if (show_colors && result != 0)
+	show_color(color);
+
+    while (--count >= 0)
+	(void) putchar(c);
+
+    if (show_colors && result != 0)
+	show_color(-1);
+
+    return result;
+}
+
+/*
+ * Each call to 'plot_num()' prints a scaled bar of 'c' characters.  The
+ * 'extra' parameter is used to keep the accumulated error in the bar's total
+ * length from getting large.
+ */
+static long
+plot_num(long num_value, int c, int color, long *extra)
+{
+    long product;
+    long result = 0;
+
+    /* the value to plot */
+    /* character to display in the bar */
+    /* accumulated error in the bar */
+    if (num_value) {
+	product = (plot_width * num_value);
+	result = ((product + *extra) / plot_scale);
+	*extra = product - (result * plot_scale) - *extra;
+	plot_bar(result, c, color);
+    }
+    return result;
+}
+
+static void
+plot_numbers(const DATA * p)
+{
+    long temp = 0;
+    long used = 0;
+    int i;
+
+    printf("%5ld ", TotalOf(p));
+
+    if (format_opt & FMT_VERBOSE) {
+	printf("%5ld ", InsOf(p));
+	printf("%5ld ", DelOf(p));
+    }
+
+    if (format_opt == FMT_CONCISE) {
+	printf("\t%ld %c", p->inserted_num, marks[0]);
+	printf("\t%ld %c", p->deleted_num, marks[1]);
+    } else {
+	switch (round_opt) {
+	default:
+	    used += plot_num(p->inserted_num, marks[0], colors[0], &temp);
+	    used += plot_num(p->deleted_num, marks[1], colors[1], &temp);
+	    break;
+	}
+
+	if ((format_opt & FMT_FILLED) != 0) {
+	    if (used > plot_width)
+		printf("%ld", used - plot_width);	/* oops */
+	    else
+		plot_bar(plot_width - used, '.', 0);
+	}
+    }
+}
+
+static char *
+data_filename(const DATA * p)
+{
+    return p ? (p->file_path + (prefix_opt >= 0 ? p->base : prefix_len)) : "";
+}
+
+static void
+show_data(DATA * p)
+{
+    char *name = data_filename(p);
+    int width;
+
+    if (summary_only) {
+	;
+    } else if (table_opt == 1) {
+	if (names_only) {
+	    printf("%s\n", name);
+	} else {
+	    printf("%ld,%ld,",
+		   InsOf(p),
+		   DelOf(p));
+	    printf("%s\n", name);
+	}
+    } else if (names_only) {
+	printf("%s\n", name);
+    } else {
+	printf("%s ", comment_opt);
+	if (max_name_wide > 0
+	    && max_name_wide < min_name_wide
+	    && max_name_wide < ((width = (int) strlen(name)))) {
+	    printf("%.*s", max_name_wide, name + (width - max_name_wide));
+	} else {
+	    width = ((max_name_wide > 0 && max_name_wide < min_name_wide)
+		     ? max_name_wide
+		     : min_name_wide);
+	    printf("%-*.*s", width, width, name);
+	}
+	if (table_opt == 2) {
+	    putchar('|');
+	    printf("%*ld ", number_len, InsOf(p));
+	    printf("%*ld ", number_len, DelOf(p));
+	}
+	putchar('|');
+	if (p->cmt == svn_dfstat_bin)
+		printf("binary");
+	else
+		plot_numbers(p);
+	printf("\n");
+    }
+}
+
+#ifdef HAVE_TSEARCH
+static void
+show_tsearch(const void *nodep, const VISIT which, const int depth)
+{
+    const DATA *p = *(DATA * const *) nodep;
+    (void) depth;
+    if (which == postorder || which == leaf)
+	show_data(p);
+}
+#endif
+
+
+/*
+ * Return the length of any directory-prefix from the given path.
+ */
+static size_t
+path_length(const char *path)
+{
+    size_t result = 0;
+    char *mark = strrchr(path, PATHSEP);
+    if (mark != 0 && mark != path)
+	result = (size_t) (mark + 1 - path);
+    return result;
+}
+
+
+static void
+update_min_name_wide(long longest_name)
+{
+    if (prefix_opt < 0) {
+	if (prefix_len < 0)
+	    prefix_len = 0;
+	if ((longest_name - prefix_len) > min_name_wide)
+	    min_name_wide = (longest_name - prefix_len);
+    }
+
+    if (min_name_wide < 1)
+	min_name_wide = 0;
+    min_name_wide++;		/* make sure it's nonzero */
+}
+
+static void
+summarize(DATA *all_data)
+{
+    DATA *p;
+    long total_ins = 0;
+    long total_del = 0;
+    long total_mod = 0;
+    long total_eql = 0;
+    long files_added = 0;
+    long files_equal = 0;
+    long files_binary = 0;
+    long files_removed = 0;
+    long temp;
+    int num_files = 0, shortest_name = -1, longest_name = -1;
+
+    plot_scale = 0;
+    for (p = all_data; p; p = p->next) {
+	int len = (int) strlen(p->file_path);
+
+	/*
+	 * If "-pX" option is given, prefix_opt is positive.
+	 *
+	 * "-p0" gives the whole pathname unmodified.  "-p1" strips
+	 * through the first path-separator, etc.
+	 */
+	if (prefix_opt >= 0) {
+	    /* p->base has been computed at node creation */
+	    if (min_name_wide < (len - p->base))
+		min_name_wide = (len - p->base);
+	} else {
+	    /*
+	     * If "-pX" option is not given, strip off any prefix which is
+	     * shared by all of the names.
+	     */
+	    if (len < prefix_len || prefix_len < 0)
+		prefix_len = len;
+	    while (prefix_len > 0) {
+		if (p->file_path[prefix_len - 1] != PATHSEP)
+		    prefix_len--;
+		else if (strncmp(all_data->file_path, p->file_path, (size_t) prefix_len))
+		    prefix_len--;
+		else
+		    break;
+	    }
+
+	    if (len > longest_name)
+		longest_name = len;
+	    if (len < shortest_name || shortest_name < 0)
+		shortest_name = len;
+	}
+    }
+
+    /*
+     * Use a separate loop after computing prefix_len so we can apply the "-S"
+     * or "-D" options to find files that we can use as reference for the
+     * unchanged-count.
+     */
+    for (p = all_data; p; p = p->next) {
+	    if (reverse_opt) {
+		long save_ins = InsOf(p);
+		long save_del = DelOf(p);
+		InsOf(p) = save_del;
+		DelOf(p) = save_ins;
+	    }
+	    num_files++;
+	    total_ins += InsOf(p);
+	    total_del += DelOf(p);
+	    temp = TotalOf(p);
+	    if (temp > plot_scale)
+		plot_scale = temp;
+    }
+
+    update_min_name_wide(longest_name);
+
+    plot_width = (max_width - min_name_wide - 8);
+    if (plot_width < 10)
+	plot_width = 10;
+
+    if (plot_scale < plot_width)
+	plot_scale = plot_width;	/* 1:1 */
+
+    if (table_opt == 1) {
+	if (!names_only) {
+	    printf("INSERTED,DELETED,MODIFIED,");
+	    if (path_opt)
+		printf("UNCHANGED,");
+	    if (count_files && !reverse_opt)
+		printf("FILE-ADDED,FILE-DELETED,FILE-BINARY,");
+	}
+	printf("FILENAME\n");
+    } else if (table_opt == 2) {
+	long largest = 0;
+	for (p = all_data; p; p = p->next) {
+	    largest = maximum(largest, InsOf(p));
+	    largest = maximum(largest, DelOf(p));
+	}
+	number_len = 0;
+	while (largest > 0) {
+	    number_len++;
+	    largest /= 10;
+	}
+	number_len = maximum(number_len, 3);
+    }
+	for (p = all_data; p; p = p->next) {
+	    show_data(p);
+	}
+
+    if ((table_opt != 1) && !names_only) {
+#define PLURAL(n) n, n != 1 ? "s" : ""
+	if (num_files > 0 || !quiet) {
+	    printf("%s %d file%s changed", comment_opt, PLURAL(num_files));
+	    if (total_ins)
+		printf(", %ld insertion%s(+)", PLURAL(total_ins));
+	    if (total_del)
+		printf(", %ld deletion%s(-)", PLURAL(total_del));
+	    (void) putchar('\n');
+	}
+    }
+}
+
+
+static svn_dfstat_ctx_t dfctx;
+static apr_pool_t *dfctx_pool;
+
+svn_error_t *
+svn_diff_create_dfctx(svn_dfstat_ctx_t **ctx)
+{
+  apr_status_t err = apr_pool_create(&dfctx_pool, NULL);
+  if (err)
+    svn_error_wrap_apr(err, "Create dfctx pool failed");
+  memset(&dfctx, 0, sizeof(dfctx));
+  *ctx = &dfctx;
+
+  /* Re-initialize diffstat's static variables */
+  path_opt = 0;
+  count_files = 0;		/* true if we count added/deleted files */
+  format_opt = FMT_NORMAL;
+  max_name_wide = 0;	/* maximum amount reserved for filenames */
+
+  max_width = 80;		/* the specified width-limit */
+  if (tty_fileno >= 0)
+    {
+      struct winsize winsz;
+
+      if (ioctl(tty_fileno, TIOCGWINSZ, (char *)&winsz) < 0)
+        {
+          fprintf(stderr, "get win size failed: %s\n", strerror(errno));
+          exit(EXIT_FAILURE);
+        }
+      max_width = winsz.ws_col;
+    }
+  max_width--;
+
+  merge_names = 1;	/* true if we merge similar filenames */
+  merge_opt = 0;	/* true if we merge ins/del as modified */
+  min_name_wide = 0;	/* minimum amount reserved for filenames */
+  names_only = 0;		/* true if we list filenames only */
+  num_marks = 3;	/* 3 or 4, according to "-P" option */
+  path_dest = 0;		/* true if path_opt is destination (patched) */
+  plot_width = 0;		/* the amount left over for histogram */
+  prefix_opt = 0;	/* if positive, controls stripping of PATHSEP */
+  quiet = 0;		/* -q option */
+  reverse_opt = 0;		/* true if results are reversed */
+  round_opt = 0;	/* if nonzero, round data for histogram */
+  show_progress = 0;	/* if not writing to tty, show progress */
+  sort_names = 1;	/* true if we sort filenames */
+  summary_only = 0;	/* true if only summary line is shown */
+  suppress_binary = 0;	/* -b option */
+  trim_escapes = 0;	/* -E option */
+  table_opt = 0;	/* if 1/2, write table instead/also plot */
+  trace_opt = 0;	/* if nonzero, write debugging information */
+  unchanged = 0;	/* special-case for -S vs modified-files */
+  verbose = 0;		/* -v option */
+  plot_scale = 0;		/* the effective scale (1:maximum) */
+  number_len = 5;
+  prefix_len = -1;
+
+  return SVN_NO_ERROR;
+}
+
+
+void
+svn_diff_destroy_dfctx(svn_dfstat_ctx_t *ctx)
+{
+  ctx->next = NULL;
+  apr_pool_destroy(dfctx_pool);
+}
+
+
+svn_error_t *
+svn_diff_stat(svn_dfstat_ctx_t *head,
+    const svn_diff_t *diff,
+    const char *file_path,
+    enum svn_dfstat_cmt cmt)
+{
+  svn_dfstat_ctx_t *t = apr_pcalloc(dfctx_pool, sizeof(*t));
+  t->file_path = apr_pstrdup(dfctx_pool, file_path);
+  t->cmt = cmt;
+  t->next = head->next;
+  head->next = (void *)t;
+  while (diff)
+    {
+      if (diff->type == svn_diff__type_diff_modified)
+        {
+          t->inserted_num += diff->modified_length;
+          t->deleted_num += diff->original_length;
+        }
+      diff = diff->next;
+    }
+  head->inserted_num += t->inserted_num;
+  head->deleted_num += t->deleted_num;
+  return SVN_NO_ERROR;
+}
+
+svn_error_t *
+svn_diff_output_dfstat(svn_stream_t *outstream,
+    svn_dfstat_ctx_t *head)
+{
+  summarize((DATA *)head->next);
+  return SVN_NO_ERROR;
+}
diff --git a/subversion/libsvn_diff/diff.h b/subversion/libsvn_diff/diff.h
index 51a84c6..81d2d46 100644
--- a/subversion/libsvn_diff/diff.h
+++ b/subversion/libsvn_diff/diff.h
@@ -27,6 +27,9 @@
 #include <apr.h>
 #include <apr_pools.h>
 #include <apr_general.h>
+#include <unistd.h>
+#include <termios.h>
+#include <sys/ioctl.h>
 
 #include "svn_diff.h"
 #include "svn_types.h"
@@ -59,6 +62,15 @@ struct svn_diff_t {
   svn_diff_t *resolved_diff;
 };
 
+struct svn_dfstat_ctx_s {
+  void *next;
+  char *file_path;
+  int base;
+  enum svn_dfstat_cmt cmt;
+  svn_linenum_t inserted_num;
+  svn_linenum_t deleted_num;
+};
+
 /* Type used for token indices and counts of tokens. Must be signed. */
 typedef long int svn_diff__token_index_t;
 
diff --git a/subversion/libsvn_diff/diff_file.c b/subversion/libsvn_diff/diff_file.c
index f54522e..0f63287 100644
--- a/subversion/libsvn_diff/diff_file.c
+++ b/subversion/libsvn_diff/diff_file.c
@@ -51,6 +51,7 @@
 #include "private/svn_dep_compat.h"
 #include "private/svn_adler32.h"
 #include "private/svn_diff_private.h"
+#include "private/svn_color.h"
 
 /* A token, i.e. a line read from a file. */
 typedef struct svn_diff__file_token_t
@@ -1248,6 +1249,7 @@ svn_diff_file_options_parse(svn_diff_file_options_t *options,
 
   opt_parsing_error_baton.err = NULL;
   opt_parsing_error_baton.pool = pool;
+  options->show_c_function = TRUE;
 
   argv[0] = "";
   memcpy(argv + 1, args->elts, sizeof(char*) * args->nelts);
@@ -1864,10 +1866,17 @@ svn_diff_file_output_unified4(svn_stream_t *output_stream,
 
       SVN_ERR(svn_utf_cstring_from_utf8_ex2(&baton.context_str, " ",
                                             header_encoding, pool));
-      SVN_ERR(svn_utf_cstring_from_utf8_ex2(&baton.delete_str, "-",
-                                            header_encoding, pool));
-      SVN_ERR(svn_utf_cstring_from_utf8_ex2(&baton.insert_str, "+",
-                                            header_encoding, pool));
+      if (!dont_use_color) {
+        SVN_ERR(svn_utf_cstring_from_utf8_ex2(&baton.delete_str,
+                          SVN_COLOR_RED "-", header_encoding, pool));
+        SVN_ERR(svn_utf_cstring_from_utf8_ex2(&baton.insert_str,
+                          SVN_COLOR_GREEN "+", header_encoding, pool));
+      } else {
+        SVN_ERR(svn_utf_cstring_from_utf8_ex2(&baton.delete_str,
+                          "-", header_encoding, pool));
+        SVN_ERR(svn_utf_cstring_from_utf8_ex2(&baton.insert_str,
+                          "+", header_encoding, pool));
+      }
 
       if (relative_to_dir)
         {
diff --git a/subversion/libsvn_diff/diff_memory.c b/subversion/libsvn_diff/diff_memory.c
index d9d800d..9bf2b3d 100644
--- a/subversion/libsvn_diff/diff_memory.c
+++ b/subversion/libsvn_diff/diff_memory.c
@@ -38,6 +38,7 @@
 #include "svn_private_config.h"
 #include "private/svn_adler32.h"
 #include "private/svn_diff_private.h"
+#include "private/svn_color.h"
 
 typedef struct source_tokens_t
 {
@@ -645,12 +646,21 @@ svn_diff_mem_string_output_unified3(svn_stream_t *output_stream,
       SVN_ERR(svn_utf_cstring_from_utf8_ex2
               (&(baton.prefix_str[unified_output_context]), " ",
                header_encoding, scratch_pool));
-      SVN_ERR(svn_utf_cstring_from_utf8_ex2
+      if (!dont_use_color) {
+        SVN_ERR(svn_utf_cstring_from_utf8_ex2
+              (&(baton.prefix_str[unified_output_delete]), SVN_COLOR_RED "-",
+               header_encoding, scratch_pool));
+        SVN_ERR(svn_utf_cstring_from_utf8_ex2
+              (&(baton.prefix_str[unified_output_insert]),SVN_COLOR_GREEN "+",
+               header_encoding, scratch_pool));
+      } else {
+        SVN_ERR(svn_utf_cstring_from_utf8_ex2
               (&(baton.prefix_str[unified_output_delete]), "-",
                header_encoding, scratch_pool));
-      SVN_ERR(svn_utf_cstring_from_utf8_ex2
+        SVN_ERR(svn_utf_cstring_from_utf8_ex2
               (&(baton.prefix_str[unified_output_insert]), "+",
                header_encoding, scratch_pool));
+      }
 
       fill_source_tokens(&baton.sources[0], original, scratch_pool);
       fill_source_tokens(&baton.sources[1], modified, scratch_pool);
diff --git a/subversion/libsvn_diff/util.c b/subversion/libsvn_diff/util.c
index a931822..9f2a16f 100644
--- a/subversion/libsvn_diff/util.c
+++ b/subversion/libsvn_diff/util.c
@@ -39,10 +39,13 @@
 
 #include "private/svn_diff_private.h"
 #include "private/svn_sorts_private.h"
+#include "private/svn_color.h"
 #include "diff.h"
 
 #include "svn_private_config.h"
 
+svn_boolean_t dont_use_color = TRUE;
+int tty_fileno = -1;
 
 svn_boolean_t
 svn_diff_contains_conflicts(svn_diff_t *diff)
@@ -375,10 +378,16 @@ svn_diff__unified_write_hunk_header(svn_stream_t *output_stream,
                                     const char *hunk_extra_context,
                                     apr_pool_t *scratch_pool)
 {
-  SVN_ERR(svn_stream_printf_from_utf8(output_stream, header_encoding,
-                                      scratch_pool,
-                                      "%s -%" APR_OFF_T_FMT,
-                                      hunk_delimiter, old_start));
+  if (!dont_use_color)
+    SVN_ERR(svn_stream_printf_from_utf8(output_stream, header_encoding,
+					scratch_pool,
+					SVN_COLOR_YELLOW "%s -%" APR_OFF_T_FMT,
+					hunk_delimiter, old_start));
+  else
+    SVN_ERR(svn_stream_printf_from_utf8(output_stream, header_encoding,
+					scratch_pool,
+					"%s -%" APR_OFF_T_FMT,
+					hunk_delimiter, old_start));
   /* If the hunk length is 1, suppress the number of lines in the hunk
    * (it is 1 implicitly) */
   if (old_length != 1)
@@ -400,7 +409,16 @@ svn_diff__unified_write_hunk_header(svn_stream_t *output_stream,
 
   if (hunk_extra_context == NULL)
       hunk_extra_context = "";
-  SVN_ERR(svn_stream_printf_from_utf8(output_stream, header_encoding,
+  if (!dont_use_color)
+    SVN_ERR(svn_stream_printf_from_utf8(output_stream, header_encoding,
+                                      scratch_pool,
+                                      " %s%s%s%s" APR_EOL_STR,
+                                      hunk_delimiter,
+                                      SVN_COLOR_RESET,
+                                      hunk_extra_context[0] ? " " : "",
+                                      hunk_extra_context));
+  else
+    SVN_ERR(svn_stream_printf_from_utf8(output_stream, header_encoding,
                                       scratch_pool,
                                       " %s%s%s" APR_EOL_STR,
                                       hunk_delimiter,
@@ -416,12 +434,20 @@ svn_diff__unidiff_write_header(svn_stream_t *output_stream,
                                const char *new_header,
                                apr_pool_t *scratch_pool)
 {
-  SVN_ERR(svn_stream_printf_from_utf8(output_stream, header_encoding,
-                                      scratch_pool,
-                                      "--- %s" APR_EOL_STR
-                                      "+++ %s" APR_EOL_STR,
-                                      old_header,
-                                      new_header));
+  if (!dont_use_color)
+    SVN_ERR(svn_stream_printf_from_utf8(output_stream, header_encoding,
+                                        scratch_pool,
+                                        SVN_COLOR_BLUE "--- %s" APR_EOL_STR
+                                        SVN_COLOR_BLUE "+++ %s" APR_EOL_STR,
+                                        old_header,
+                                        new_header));
+  else
+    SVN_ERR(svn_stream_printf_from_utf8(output_stream, header_encoding,
+                                        scratch_pool,
+                                        "--- %s" APR_EOL_STR
+                                        "+++ %s" APR_EOL_STR,
+                                        old_header,
+                                        new_header));
   return SVN_NO_ERROR;
 }
 
diff --git a/subversion/libsvn_subr/cmdline.c b/subversion/libsvn_subr/cmdline.c
index 9e97bf7..c5316f1 100644
--- a/subversion/libsvn_subr/cmdline.c
+++ b/subversion/libsvn_subr/cmdline.c
@@ -43,6 +43,7 @@
 #include <apr_strings.h>        /* for apr_snprintf */
 #include <apr_pools.h>
 
+#include "svn_client.h"
 #include "svn_cmdline.h"
 #include "svn_ctype.h"
 #include "svn_dso.h"
@@ -70,6 +71,8 @@
 
 #include "win32_crashrpt.h"
 
+#define SVN_CLIENT_EDITOR "vi"
+
 #if defined(WIN32) && defined(_MSC_VER) && (_MSC_VER < 1400)
 /* Before Visual Studio 2005, the C runtime didn't handle encodings for the
    for the stdio output handling. */
@@ -1318,6 +1321,8 @@ svn_cmdline__edit_string_externally(svn_string_t **edited_contents /* UTF-8! */,
                                     apr_hash_t *config,
                                     svn_boolean_t as_text,
                                     const char *encoding,
+                                    svn_boolean_t verbose,
+                                    const apr_array_header_t *commit_items,
                                     apr_pool_t *pool)
 {
   const char *editor;
@@ -1428,6 +1433,29 @@ svn_cmdline__edit_string_externally(svn_string_t **edited_contents /* UTF-8! */,
       goto cleanup;
     }
 
+  if (verbose) {
+    int i, len = 0;
+    char *buf;
+    for (i = 0; i < commit_items->nelts; i++)
+      {
+        int t = strlen((APR_ARRAY_IDX(commit_items, i,
+                svn_client_commit_item3_t *))->diff_relpath);
+        if (t > len)
+          len = t;
+      }
+    buf = apr_pcalloc(pool, (strlen("svn di --properties-only  >> ") +
+          strlen(tmpfile_name) + len + 2) * sizeof(*buf));
+    for (i = 0; i < commit_items->nelts; i++)
+      {
+        svn_client_commit_item3_t *item
+            = APR_ARRAY_IDX(commit_items, i, svn_client_commit_item3_t *);
+        sprintf(buf, "svn di %s %s >> %s",
+            item->state_flags & SVN_CLIENT_COMMIT_ITEM_PROP_MODS ?
+            "--properties-only" : "", item->diff_relpath, tmpfile_name);
+        system(buf);
+      }
+  }
+
   err = svn_path_cstring_from_utf8(&tmpfile_apr, tmpfile_name, pool);
   if (err)
     goto cleanup;
diff --git a/subversion/libsvn_subr/sqlite.c b/subversion/libsvn_subr/sqlite.c
index 18124a3..988ebd4 100644
--- a/subversion/libsvn_subr/sqlite.c
+++ b/subversion/libsvn_subr/sqlite.c
@@ -142,6 +142,12 @@ struct svn_sqlite__db_t
   svn_sqlite__stmt_t **prepared_stmts;
   apr_pool_t *state_pool;
 
+  /*
+   * File descriptor of SVN_IGNORE_FILE. The role of SVN_IGNORE_FILE is
+   * analogous to sqlite db, so I put it in this struct.
+   */
+  apr_file_t   *svn_ignore_file;
+
 #ifdef SVN_UNICODE_NORMALIZATION_FIXES
   /* Buffers for SQLite extensoins. */
   svn_membuf_t sqlext_buf1;
@@ -978,7 +984,10 @@ close_apr(void *data)
     return SQLITE_ERROR_CODE(result); /* ### lossy */
 
   db->db3 = NULL;
-
+  if (db->svn_ignore_file) {
+    apr_file_close(db->svn_ignore_file);
+    db->svn_ignore_file = NULL;
+  }
   return APR_SUCCESS;
 }
 
@@ -1076,6 +1085,17 @@ like_ucs_nfd(sqlite3_context *context,
 }
 #endif /* SVN_UNICODE_NORMALIZATION_FIXES */
 
+svn_error_t *
+svn_sqlite__open_file(svn_sqlite__db_t *db, const char *path, apr_pool_t *pool)
+{
+  apr_status_t ret;
+  ret = apr_file_open(&db->svn_ignore_file, path, APR_READ, 0, pool);
+  if (ret == APR_SUCCESS)
+    return SVN_NO_ERROR;
+  else
+    return svn_error_wrap_apr(ret, NULL);
+}
+
 svn_error_t *
 svn_sqlite__open(svn_sqlite__db_t **db, const char *path,
                  svn_sqlite__mode_t mode, const char * const statements[],
@@ -1606,3 +1626,26 @@ svn_sqlite__result_error(svn_sqlite__context_t *sctx, const char *msg, int num)
 {
   sqlite3_result_error(sctx->context, msg, num);
 }
+
+svn_error_t *
+read_svn_ignore(svn_sqlite__db_t *sdb,
+		char **res,
+		apr_pool_t *result_pool,
+		apr_pool_t *scratch_pool)
+{
+  if (!sdb->svn_ignore_file)
+    return SVN_NO_ERROR;
+
+  apr_file_t *file = sdb->svn_ignore_file;
+  apr_off_t offset = 0;
+  char buf[4096] = { 0 };
+  apr_size_t size = sizeof(buf) - 1;
+
+  *res = NULL;
+  apr_file_seek(file, APR_SET, &offset);
+  if (apr_file_read(file, buf, &size) == APR_SUCCESS) {
+    *res = apr_pstrdup(result_pool, buf);
+    return SVN_NO_ERROR;
+  } else
+    return (svn_error_t *)-1;
+}
diff --git a/subversion/libsvn_subr/version.c b/subversion/libsvn_subr/version.c
index 0210fd8..9fd4e7f 100644
--- a/subversion/libsvn_subr/version.c
+++ b/subversion/libsvn_subr/version.c
@@ -115,6 +115,7 @@ struct svn_version_extended_t
   const char *copyright;        /* Copyright notice (localized) */
   const char *runtime_host;     /* Runtime canonical host name */
   const char *runtime_osname;   /* Running OS release name */
+  const char *hacker;           /* Name of hacker, if any */
 
   /* Array of svn_version_ext_linked_lib_t describing dependent
      libraries. */
@@ -135,8 +136,10 @@ svn_version_extended(svn_boolean_t verbose,
   info->build_date = __DATE__;
   info->build_time = __TIME__;
   info->build_host = SVN_BUILD_HOST;
+  info->hacker = "wuzhouhui250@gmail.com";
   info->copyright = apr_pstrdup
     (pool, _("Copyright (C) 2017 The Apache Software Foundation.\n"
+             "Copyright (C) 2016, 2017 Zhouhui Wu <wuzhouhui250@gmail.com>.\n"
              "This software consists of contributions made by many people;\n"
              "see the NOTICE file for more information.\n"
              "Subversion is open source software, see "
@@ -172,6 +175,12 @@ svn_version_ext_build_host(const svn_version_extended_t *ext_info)
   return ext_info->build_host;
 }
 
+const char *
+svn_version_ext_build_hacker(const svn_version_extended_t *ext_info)
+{
+  return ext_info->hacker;
+}
+
 const char *
 svn_version_ext_copyright(const svn_version_extended_t *ext_info)
 {
diff --git a/subversion/libsvn_wc/status.c b/subversion/libsvn_wc/status.c
index 83fd3d4..39ce9f8 100644
--- a/subversion/libsvn_wc/status.c
+++ b/subversion/libsvn_wc/status.c
@@ -911,6 +911,13 @@ collect_ignore_patterns(apr_array_header_t **patterns,
                                  result_pool);
     }
 
+    {
+      const char *str = get_private(db);
+      if (str)
+        svn_cstring_split_append(*patterns, str, "\n\r", FALSE,
+                                 result_pool);
+    }
+
   for (i = 0; i < inherited_props->nelts; i++)
     {
       svn_prop_inherited_item_t *elt = APR_ARRAY_IDX(
diff --git a/subversion/libsvn_wc/wc_db.c b/subversion/libsvn_wc/wc_db.c
index ee17b85..2e30018 100644
--- a/subversion/libsvn_wc/wc_db.c
+++ b/subversion/libsvn_wc/wc_db.c
@@ -10910,6 +10910,11 @@ db_read_inherited_props(apr_array_header_t **inherited_props,
   return SVN_NO_ERROR;
 }
 
+void *get_private(svn_wc__db_t *db)
+{
+  return db->private;
+}
+
 svn_error_t *
 svn_wc__db_read_inherited_props(apr_array_header_t **iprops,
                                 apr_hash_t **actual_props,
@@ -10933,6 +10938,11 @@ svn_wc__db_read_inherited_props(apr_array_header_t **iprops,
                                               wcroot, local_relpath, propname,
                                               result_pool, scratch_pool),
                       wcroot);
+  if (propname && strcmp(propname, SVN_PROP_INHERITABLE_IGNORES))
+    return SVN_NO_ERROR;
+  else
+    read_svn_ignore(wcroot->sdb, (char **)&db->private, result_pool,
+		    scratch_pool);
 
   return SVN_NO_ERROR;
 }
diff --git a/subversion/libsvn_wc/wc_db.h b/subversion/libsvn_wc/wc_db.h
index a947be0..9f5803e 100644
--- a/subversion/libsvn_wc/wc_db.h
+++ b/subversion/libsvn_wc/wc_db.h
@@ -2237,6 +2237,8 @@ svn_wc__db_read_inherited_props(apr_array_header_t **iprops,
                                 apr_pool_t *result_pool,
                                 apr_pool_t *scratch_pool);
 
+void *get_private(svn_wc__db_t *);
+
 /* Read a BASE node's inherited property information.
 
    Set *IPROPS to to a depth-first ordered array of
diff --git a/subversion/libsvn_wc/wc_db_private.h b/subversion/libsvn_wc/wc_db_private.h
index a9d7b04..2e6cab8 100644
--- a/subversion/libsvn_wc/wc_db_private.h
+++ b/subversion/libsvn_wc/wc_db_private.h
@@ -66,6 +66,7 @@ struct svn_wc__db_t {
 
   /* As we grow the state of this DB, allocate that state here. */
   apr_pool_t *state_pool;
+  void	*private;
 };
 
 
diff --git a/subversion/libsvn_wc/wc_db_util.c b/subversion/libsvn_wc/wc_db_util.c
index 074feff..0841a97 100644
--- a/subversion/libsvn_wc/wc_db_util.c
+++ b/subversion/libsvn_wc/wc_db_util.c
@@ -49,6 +49,8 @@
 
 WC_QUERIES_SQL_DECLARE_STATEMENTS(statements);
 
+#define SVN_IGNORE_FILE ".svnignore"
+
 
 
 /* */
@@ -122,10 +124,12 @@ svn_wc__db_util_open_db(svn_sqlite__db_t **sdb,
 {
   const char *sdb_abspath = svn_wc__adm_child(dir_abspath, sdb_fname,
                                               scratch_pool);
+  const char *ign_abspath = svn_dirent_join_many(scratch_pool, dir_abspath,
+		  SVN_IGNORE_FILE, SVN_VA_NULL);
+  svn_node_kind_t kind;
 
   if (smode != svn_sqlite__mode_rwcreate)
     {
-      svn_node_kind_t kind;
 
       /* A file stat is much cheaper then a failed database open handled
          by SQLite. */
@@ -141,6 +145,9 @@ svn_wc__db_util_open_db(svn_sqlite__db_t **sdb,
   SVN_ERR(svn_sqlite__open(sdb, sdb_abspath, smode,
                            my_statements ? my_statements : statements,
                            0, NULL, timeout, result_pool, scratch_pool));
+  SVN_ERR(svn_io_check_path(ign_abspath, &kind, scratch_pool));
+  if (kind == svn_node_file)
+    SVN_ERR(svn_sqlite__open_file(*sdb, ign_abspath, result_pool));
 
   if (exclusive)
     SVN_ERR(svn_sqlite__exec_statements(*sdb, STMT_PRAGMA_LOCKING_MODE));
diff --git a/subversion/svn/cl-log.h b/subversion/svn/cl-log.h
index 5b4c7aa..def453e 100644
--- a/subversion/svn/cl-log.h
+++ b/subversion/svn/cl-log.h
@@ -57,6 +57,9 @@ typedef struct svn_cl__log_receiver_baton
   /* Whether to show diffs in the log. (maps to --diff) */
   svn_boolean_t show_diff;
 
+  /* Whether to show diff stats in the log. (maps to --stat) */
+  svn_boolean_t diffstat;
+
   /* Depth applied to diff output. */
   svn_depth_t depth;
 
diff --git a/subversion/svn/cl.h b/subversion/svn/cl.h
index 42e770e..c0fa537 100644
--- a/subversion/svn/cl.h
+++ b/subversion/svn/cl.h
@@ -193,6 +193,8 @@ typedef struct svn_cl__opt_state_t
   svn_boolean_t ignore_properties;   /* ignore properties */
   svn_boolean_t properties_only;     /* Show properties only */
   svn_boolean_t patch_compatible;    /* Output compatible with GNU patch */
+  svn_boolean_t no_color;            /* Disable syntax highlight */
+  svn_boolean_t diffstat;            /* Display statistics of diff */
     } diff;
   svn_boolean_t ignore_ancestry; /* ignore ancestry for merge-y operations */
   svn_boolean_t ignore_externals;/* ignore externals definitions */
@@ -238,6 +240,7 @@ typedef struct svn_cl__opt_state_t
   svn_boolean_t ignore_whitespace; /* don't account for whitespace when
                                       patching */
   svn_boolean_t show_diff;         /* produce diff output (maps to --diff) */
+  svn_boolean_t diffstat;          /* display statistics of diff */
   svn_boolean_t allow_mixed_rev;   /* Allow operation on mixed-revision WC */
   svn_boolean_t include_externals; /* Recurses (in)to file & dir externals */
   svn_boolean_t show_inherited_props;  /* get inherited properties */
@@ -267,6 +270,7 @@ svn_opt_subcommand_t
   svn_cl__cat,
   svn_cl__changelist,
   svn_cl__checkout,
+  svn_cl__clean,
   svn_cl__cleanup,
   svn_cl__commit,
   svn_cl__copy,
@@ -466,6 +470,21 @@ svn_cl__print_status(const char *target_abspath,
                      svn_client_ctx_t *ctx,
                      apr_pool_t *pool);
 
+svn_error_t *
+svn_cl__remove_unversioned(const char *target_abspath,
+                     const char *target_path,
+                     const char *path,
+                     const svn_client_status_t *status,
+                     svn_boolean_t suppress_externals_placeholders,
+                     svn_boolean_t detailed,
+                     svn_boolean_t show_last_committed,
+                     svn_boolean_t skip_unrecognized,
+                     svn_boolean_t repos_locks,
+                     unsigned int *text_conflicts,
+                     unsigned int *prop_conflicts,
+                     unsigned int *tree_conflicts,
+                     svn_client_ctx_t *ctx,
+                     apr_pool_t *pool);
 
 /* Print STATUS for PATH in XML to stdout.  Use POOL for temporary
    allocations.
diff --git a/subversion/svn/clean-cmd.c b/subversion/svn/clean-cmd.c
new file mode 100644
index 0000000..71c5c61
--- /dev/null
+++ b/subversion/svn/clean-cmd.c
@@ -0,0 +1,431 @@
+/*
+ * clean-cmd.c -- Remove untracked files and directories.
+ *
+ * ====================================================================
+ *    Licensed to the Apache Software Foundation (ASF) under one
+ *    or more contributor license agreements.  See the NOTICE file
+ *    distributed with this work for additional information
+ *    regarding copyright ownership.  The ASF licenses this file
+ *    to you under the Apache License, Version 2.0 (the
+ *    "License"); you may not use this file except in compliance
+ *    with the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *    Unless required by applicable law or agreed to in writing,
+ *    software distributed under the License is distributed on an
+ *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ *    KIND, either express or implied.  See the License for the
+ *    specific language governing permissions and limitations
+ *    under the License.
+ * ====================================================================
+ */
+
+/* ==================================================================== */
+
+
+
+/*** Includes. ***/
+#include "svn_hash.h"
+#include "svn_string.h"
+#include "svn_wc.h"
+#include "svn_client.h"
+#include "svn_error_codes.h"
+#include "svn_error.h"
+#include "svn_pools.h"
+#include "svn_xml.h"
+#include "svn_dirent_uri.h"
+#include "svn_path.h"
+#include "svn_cmdline.h"
+#include "cl.h"
+
+#include "svn_private_config.h"
+#include "private/svn_wc_private.h"
+
+
+/*** Code. ***/
+
+struct status_baton
+{
+  /* These fields all correspond to the ones in the
+     svn_cl__remove_unversioned() interface. */
+  const char *target_abspath;
+  const char *target_path;
+  svn_boolean_t suppress_externals_placeholders;
+  svn_boolean_t detailed;
+  svn_boolean_t show_last_committed;
+  svn_boolean_t quiet;
+  svn_boolean_t repos_locks;
+
+  apr_hash_t *cached_changelists;
+  apr_pool_t *cl_pool;          /* where cached changelists are allocated */
+
+  svn_boolean_t had_print_error;  /* To avoid printing lots of errors if we get
+                                     errors while printing to stdout */
+  svn_boolean_t xml_mode;
+
+  /* Conflict stats. */
+  unsigned int text_conflicts;
+  unsigned int prop_conflicts;
+  unsigned int tree_conflicts;
+
+  svn_client_ctx_t *ctx;
+};
+
+
+struct status_cache
+{
+  const char *path;
+  const char *target_abspath;
+  const char *target_path;
+  svn_client_status_t *status;
+};
+
+/* Print conflict stats accumulated in status baton SB.
+ * Do temporary allocations in POOL. */
+static svn_error_t *
+print_conflict_stats(struct status_baton *sb, apr_pool_t *pool)
+{
+  if (sb->text_conflicts > 0 || sb->prop_conflicts > 0 ||
+      sb->tree_conflicts > 0)
+      SVN_ERR(svn_cmdline_printf(pool, "%s", _("Summary of conflicts:\n")));
+
+  if (sb->text_conflicts > 0)
+    SVN_ERR(svn_cmdline_printf
+      (pool, _("  Text conflicts: %u\n"), sb->text_conflicts));
+
+  if (sb->prop_conflicts > 0)
+    SVN_ERR(svn_cmdline_printf
+      (pool, _("  Property conflicts: %u\n"), sb->prop_conflicts));
+
+  if (sb->tree_conflicts > 0)
+    SVN_ERR(svn_cmdline_printf
+      (pool, _("  Tree conflicts: %u\n"), sb->tree_conflicts));
+
+  return SVN_NO_ERROR;
+}
+
+/* Prints XML target element with path attribute TARGET, using POOL for
+   temporary allocations. */
+static svn_error_t *
+print_start_target_xml(const char *target, apr_pool_t *pool)
+{
+  svn_stringbuf_t *sb = svn_stringbuf_create_empty(pool);
+
+  svn_xml_make_open_tag(&sb, pool, svn_xml_normal, "target",
+                        "path", target, SVN_VA_NULL);
+
+  return svn_cl__error_checked_fputs(sb->data, stdout);
+}
+
+
+/* Finish a target element by optionally printing an against element if
+ * REPOS_REV is a valid revision number, and then printing an target end tag.
+ * Use POOL for temporary allocations. */
+static svn_error_t *
+print_finish_target_xml(svn_revnum_t repos_rev,
+                        apr_pool_t *pool)
+{
+  svn_stringbuf_t *sb = svn_stringbuf_create_empty(pool);
+
+  if (SVN_IS_VALID_REVNUM(repos_rev))
+    {
+      const char *repos_rev_str;
+      repos_rev_str = apr_psprintf(pool, "%ld", repos_rev);
+      svn_xml_make_open_tag(&sb, pool, svn_xml_self_closing, "against",
+                            "revision", repos_rev_str, SVN_VA_NULL);
+    }
+
+  svn_xml_make_close_tag(&sb, pool, "target");
+
+  return svn_cl__error_checked_fputs(sb->data, stdout);
+}
+
+
+/* Function which *actually* causes a status structure to be output to
+   the user.  Called by both print_status() and svn_cl__status(). */
+static svn_error_t *
+do_remove_unversioned(void *baton,
+                           const char *path,
+                           const svn_client_status_t *status,
+                           apr_pool_t *pool)
+{
+  struct status_baton *sb = baton;
+  return svn_cl__remove_unversioned(sb->target_abspath, sb->target_path,
+                              path, status,
+                              sb->suppress_externals_placeholders,
+                              sb->detailed,
+                              sb->show_last_committed,
+                              sb->quiet,
+                              sb->repos_locks,
+                              &sb->text_conflicts,
+                              &sb->prop_conflicts,
+                              &sb->tree_conflicts,
+                              sb->ctx,
+                              pool);
+}
+
+
+/* A status callback function for printing STATUS for PATH. */
+static svn_error_t *
+remove_unversioned(void *baton,
+             const char *path,
+             const svn_client_status_t *status,
+             apr_pool_t *pool)
+{
+  struct status_baton *sb = baton;
+  const char *local_abspath = status->local_abspath;
+
+  /* ### The revision information with associates are based on what
+   * ### _read_info() returns. The svn_wc_status_func4_t callback is
+   * ### suppposed to handle the gathering of additional information from the
+   * ### WORKING nodes on its own. Until we've agreed on how the CLI should
+   * ### handle the revision information, we use this approach to stay compat
+   * ### with our testsuite. */
+  if (status->versioned
+      && !SVN_IS_VALID_REVNUM(status->revision)
+      && !status->copied
+      && (status->node_status == svn_wc_status_deleted
+          || status->node_status == svn_wc_status_replaced))
+    {
+      svn_client_status_t *twks = svn_client_status_dup(status, sb->cl_pool);
+
+      /* Copied is FALSE, so either we have a local addition, or we have
+         a delete that directly shadows a BASE node */
+
+      switch(status->node_status)
+        {
+          case svn_wc_status_replaced:
+            /* Just retrieve the revision below the replacement.
+               The other fields are filled by a copy.
+               (With ! copied, we know we have a BASE node)
+
+               ### Is this really what we want to provide? */
+            SVN_ERR(svn_wc__node_get_pre_ng_status_data(&twks->revision,
+                                                        NULL, NULL, NULL,
+                                                        sb->ctx->wc_ctx,
+                                                        local_abspath,
+                                                        sb->cl_pool, pool));
+            break;
+          case svn_wc_status_deleted:
+            /* Retrieve some data from the original version below the delete */
+            SVN_ERR(svn_wc__node_get_pre_ng_status_data(&twks->revision,
+                                                        &twks->changed_rev,
+                                                        &twks->changed_date,
+                                                        &twks->changed_author,
+                                                        sb->ctx->wc_ctx,
+                                                        local_abspath,
+                                                        sb->cl_pool, pool));
+            break;
+
+          default:
+            /* This space intentionally left blank. */
+            break;
+        }
+
+      status = twks;
+    }
+
+  /* If the path is part of a changelist, then we don't print
+     the item, but instead dup & cache the status structure for later. */
+  if (status->changelist)
+    {
+      /* The hash maps a changelist name to an array of status_cache
+         structures. */
+      apr_array_header_t *path_array;
+      const char *cl_key = apr_pstrdup(sb->cl_pool, status->changelist);
+      struct status_cache *scache = apr_pcalloc(sb->cl_pool, sizeof(*scache));
+      scache->path = apr_pstrdup(sb->cl_pool, path);
+      scache->target_abspath = apr_pstrdup(sb->cl_pool, sb->target_abspath);
+      scache->target_path = apr_pstrdup(sb->cl_pool, sb->target_path);
+      scache->status = svn_client_status_dup(status, sb->cl_pool);
+
+      path_array =
+        svn_hash_gets(sb->cached_changelists, cl_key);
+      if (path_array == NULL)
+        {
+          path_array = apr_array_make(sb->cl_pool, 1,
+                                      sizeof(struct status_cache *));
+          svn_hash_sets(sb->cached_changelists, cl_key, path_array);
+        }
+
+      APR_ARRAY_PUSH(path_array, struct status_cache *) = scache;
+      return SVN_NO_ERROR;
+    }
+
+  return do_remove_unversioned(baton, path, status, pool);
+}
+
+/* This implements the `svn_opt_subcommand_t' interface. */
+svn_error_t *
+svn_cl__clean(apr_getopt_t *os,
+               void *baton,
+               apr_pool_t *scratch_pool)
+{
+  svn_cl__opt_state_t *opt_state = ((svn_cl__cmd_baton_t *) baton)->opt_state;
+  svn_client_ctx_t *ctx = ((svn_cl__cmd_baton_t *) baton)->ctx;
+  apr_array_header_t *targets;
+  apr_pool_t *iterpool;
+  apr_hash_t *master_cl_hash = apr_hash_make(scratch_pool);
+  int i;
+  svn_opt_revision_t rev;
+  struct status_baton sb;
+
+  SVN_ERR(svn_cl__args_to_target_array_print_reserved(&targets, os,
+                                                      opt_state->targets,
+                                                      ctx, FALSE,
+                                                      scratch_pool));
+
+  /* Add "." if user passed 0 arguments */
+  svn_opt_push_implicit_dot_target(targets, scratch_pool);
+
+  SVN_ERR(svn_cl__check_targets_are_local_paths(targets));
+
+  /* We want our -u statuses to be against HEAD by default. */
+  if (opt_state->start_revision.kind == svn_opt_revision_unspecified)
+    rev.kind = svn_opt_revision_head;
+  else if (! opt_state->update)
+    return svn_error_create(SVN_ERR_CL_ARG_PARSING_ERROR, NULL,
+                        _("--revision (-r) option valid only with "
+                          "--show-updates (-u) option"));
+  else
+    rev = opt_state->start_revision;
+
+  sb.had_print_error = FALSE;
+
+  if (opt_state->xml)
+    {
+      /* If output is not incremental, output the XML header and wrap
+         everything in a top-level element. This makes the output in
+         its entirety a well-formed XML document. */
+      if (! opt_state->incremental)
+        SVN_ERR(svn_cl__xml_print_header("status", scratch_pool));
+    }
+  else
+    {
+      if (opt_state->incremental)
+        return svn_error_create(SVN_ERR_CL_ARG_PARSING_ERROR, NULL,
+                                _("'incremental' option only valid in XML "
+                                  "mode"));
+    }
+
+  sb.suppress_externals_placeholders = (opt_state->quiet
+                                        && (! opt_state->verbose));
+  sb.detailed = (opt_state->verbose || opt_state->update);
+  sb.show_last_committed = opt_state->verbose;
+  sb.quiet = opt_state->quiet;
+  sb.repos_locks = opt_state->update;
+  sb.xml_mode = opt_state->xml;
+  sb.cached_changelists = master_cl_hash;
+  sb.cl_pool = scratch_pool;
+  sb.text_conflicts = 0;
+  sb.prop_conflicts = 0;
+  sb.tree_conflicts = 0;
+  sb.ctx = ctx;
+
+  SVN_ERR(svn_cl__eat_peg_revisions(&targets, targets, scratch_pool));
+
+  iterpool = svn_pool_create(scratch_pool);
+  for (i = 0; i < targets->nelts; i++)
+    {
+      const char *target = APR_ARRAY_IDX(targets, i, const char *);
+      svn_revnum_t repos_rev = SVN_INVALID_REVNUM;
+
+      svn_pool_clear(iterpool);
+
+      SVN_ERR(svn_dirent_get_absolute(&(sb.target_abspath), target,
+                                      scratch_pool));
+      sb.target_path = target;
+
+      SVN_ERR(svn_cl__check_cancel(ctx->cancel_baton));
+
+      if (opt_state->xml)
+        SVN_ERR(print_start_target_xml(svn_dirent_local_style(target, iterpool),
+                                       iterpool));
+
+      /* Retrieve a hash of status structures with the information
+         requested by the user. */
+      SVN_ERR(svn_cl__try(svn_client_status6(&repos_rev, ctx, target, &rev,
+                                             opt_state->depth,
+                                             opt_state->verbose,
+                                             opt_state->update,
+                                             TRUE /* check_working_copy */,
+                                             opt_state->no_ignore,
+                                             opt_state->ignore_externals,
+                                             FALSE /* depth_as_sticky */,
+                                             opt_state->changelists,
+                                             remove_unversioned, &sb,
+                                             iterpool),
+                          NULL, opt_state->quiet,
+                          /* not versioned: */
+                          SVN_ERR_WC_NOT_WORKING_COPY,
+                          SVN_ERR_WC_PATH_NOT_FOUND,
+                          0));
+
+      if (opt_state->xml)
+        SVN_ERR(print_finish_target_xml(repos_rev, iterpool));
+    }
+
+  /* If any paths were cached because they were associated with
+     changelists, we can now display them as grouped changelists. */
+  if (apr_hash_count(master_cl_hash) > 0)
+    {
+      apr_hash_index_t *hi;
+      svn_stringbuf_t *buf;
+
+      if (opt_state->xml)
+        buf = svn_stringbuf_create_empty(scratch_pool);
+
+      for (hi = apr_hash_first(scratch_pool, master_cl_hash); hi;
+           hi = apr_hash_next(hi))
+        {
+          const char *changelist_name = apr_hash_this_key(hi);
+          apr_array_header_t *path_array = apr_hash_this_val(hi);
+          int j;
+
+          /* ### TODO: For non-XML output, we shouldn't print the
+             ### leading \n on the first changelist if there were no
+             ### non-changelist entries. */
+          if (opt_state->xml)
+            {
+              svn_stringbuf_setempty(buf);
+              svn_xml_make_open_tag(&buf, scratch_pool, svn_xml_normal,
+                                    "changelist", "name", changelist_name,
+                                    SVN_VA_NULL);
+              SVN_ERR(svn_cl__error_checked_fputs(buf->data, stdout));
+            }
+          else
+            SVN_ERR(svn_cmdline_printf(scratch_pool,
+                                       _("\n--- Changelist '%s':\n"),
+                                       changelist_name));
+
+          for (j = 0; j < path_array->nelts; j++)
+            {
+              struct status_cache *scache =
+                APR_ARRAY_IDX(path_array, j, struct status_cache *);
+              sb.target_abspath = scache->target_abspath;
+              sb.target_path = scache->target_path;
+              SVN_ERR(do_remove_unversioned(&sb, scache->path,
+                                                 scache->status, scratch_pool));
+            }
+
+          if (opt_state->xml)
+            {
+              svn_stringbuf_setempty(buf);
+              svn_xml_make_close_tag(&buf, scratch_pool, "changelist");
+              SVN_ERR(svn_cl__error_checked_fputs(buf->data, stdout));
+            }
+        }
+    }
+  svn_pool_destroy(iterpool);
+
+  if (opt_state->xml && (! opt_state->incremental))
+    SVN_ERR(svn_cl__xml_print_footer("status", scratch_pool));
+
+  if (! opt_state->quiet && ! opt_state->xml)
+      SVN_ERR(print_conflict_stats(&sb, scratch_pool));
+
+  return SVN_NO_ERROR;
+}
+
+/* vim: set et sw=2 ts=2 sts=2: */
diff --git a/subversion/svn/diff-cmd.c b/subversion/svn/diff-cmd.c
index 71853c7..9de667f 100644
--- a/subversion/svn/diff-cmd.c
+++ b/subversion/svn/diff-cmd.c
@@ -425,6 +425,28 @@ svn_cl__diff(apr_getopt_t *os,
                                 summarize_func, &summarize_baton,
                                 ctx, iterpool));
             }
+          else if (opt_state->diff.diffstat)
+            SVN_ERR(svn_client_diff6_diffstat(
+                     options,
+                     target1,
+                     &(opt_state->start_revision),
+                     target2,
+                     &(opt_state->end_revision),
+                     NULL,
+                     opt_state->depth,
+                     ! opt_state->diff.notice_ancestry,
+                     opt_state->diff.no_diff_added,
+                     opt_state->diff.no_diff_deleted,
+                     show_copies_as_adds,
+                     ignore_content_type,
+                     ignore_properties,
+                     opt_state->diff.properties_only,
+                     opt_state->diff.use_git_diff_format,
+                     svn_cmdline_output_encoding(pool),
+                     outstream,
+                     errstream,
+                     opt_state->changelists,
+                     ctx, iterpool));
           else
             SVN_ERR(svn_client_diff6(
                      options,
@@ -477,6 +499,28 @@ svn_cl__diff(apr_getopt_t *os,
                                 summarize_func, &summarize_baton,
                                 ctx, iterpool));
             }
+          else if (opt_state->diff.diffstat)
+            SVN_ERR(svn_client_diff_peg6_diffstat(
+                     options,
+                     truepath,
+                     &peg_revision,
+                     &opt_state->start_revision,
+                     &opt_state->end_revision,
+                     NULL,
+                     opt_state->depth,
+                     ! opt_state->diff.notice_ancestry,
+                     opt_state->diff.no_diff_added,
+                     opt_state->diff.no_diff_deleted,
+                     show_copies_as_adds,
+                     ignore_content_type,
+                     ignore_properties,
+                     opt_state->diff.properties_only,
+                     opt_state->diff.use_git_diff_format,
+                     svn_cmdline_output_encoding(pool),
+                     outstream,
+                     errstream,
+                     opt_state->changelists,
+                     ctx, iterpool));
           else
             SVN_ERR(svn_client_diff_peg6(
                      options,
diff --git a/subversion/svn/log-cmd.c b/subversion/svn/log-cmd.c
index 44f8a4c..b30d390 100644
--- a/subversion/svn/log-cmd.c
+++ b/subversion/svn/log-cmd.c
@@ -38,6 +38,7 @@
 
 #include "private/svn_cmdline_private.h"
 #include "private/svn_sorts_private.h"
+#include "private/svn_color.h"
 
 #include "cl.h"
 #include "cl-log.h"
@@ -111,6 +112,57 @@ display_diff(const svn_log_entry_t *log_entry,
 }
 
 
+static svn_error_t *
+display_diffstat(const svn_log_entry_t *log_entry,
+             const char *target_path_or_url,
+             const svn_opt_revision_t *target_peg_revision,
+             svn_depth_t depth,
+             const char *diff_extensions,
+             svn_stream_t *outstream,
+             svn_stream_t *errstream,
+             svn_client_ctx_t *ctx,
+             apr_pool_t *pool)
+{
+  apr_array_header_t *diff_options;
+  svn_opt_revision_t start_revision;
+  svn_opt_revision_t end_revision;
+
+  /* Fall back to "" to get options initialized either way. */
+  if (diff_extensions)
+    diff_options = svn_cstring_split(diff_extensions, " \t\n\r",
+                                     TRUE, pool);
+  else
+    diff_options = NULL;
+
+  start_revision.kind = svn_opt_revision_number;
+  start_revision.value.number = log_entry->revision - 1;
+  end_revision.kind = svn_opt_revision_number;
+  end_revision.value.number = log_entry->revision;
+
+  SVN_ERR(svn_stream_puts(outstream, "\n"));
+  SVN_ERR(svn_client_diff_peg6_diffstat(diff_options,
+                               target_path_or_url,
+                               target_peg_revision,
+                               &start_revision, &end_revision,
+                               NULL,
+                               depth,
+                               FALSE /* ignore ancestry */,
+                               FALSE /* no diff added */,
+                               FALSE /* no diff deleted */,
+                               TRUE  /* show copies as adds */,
+                               FALSE /* ignore content type */,
+                               TRUE  /* ignore prop diff */,
+                               FALSE /* properties only */,
+                               FALSE /* use git diff format */,
+                               svn_cmdline_output_encoding(pool),
+                               outstream,
+                               errstream,
+                               NULL,
+                               ctx, pool));
+  return SVN_NO_ERROR;
+}
+
+
 /* Return TRUE if SEARCH_PATTERN matches the AUTHOR, DATE, LOG_MESSAGE,
  * or a path in the set of keys of the CHANGED_PATHS hash. Else, return FALSE.
  * Any of AUTHOR, DATE, LOG_MESSAGE, and CHANGED_PATHS may be NULL. */
@@ -344,9 +396,15 @@ svn_cl__log_entry_receiver(void *baton,
       return SVN_NO_ERROR;
     }
 
-  SVN_ERR(svn_cmdline_printf(pool,
-                             SVN_CL__LOG_SEP_STRING "r%ld | %s | %s",
-                             log_entry->revision, author, date));
+  if (!dont_use_color)
+    SVN_ERR(svn_cmdline_printf(pool,
+                               SVN_COLOR_MAGENTA SVN_CL__LOG_SEP_STRING
+                               SVN_COLOR_MAGENTA "r%ld | %s | %s",
+			       log_entry->revision, author, date));
+  else
+    SVN_ERR(svn_cmdline_printf(pool,
+                               SVN_CL__LOG_SEP_STRING "r%ld | %s | %s",
+			       log_entry->revision, author, date));
 
   if (message != NULL)
     {
@@ -434,6 +492,24 @@ svn_cl__log_entry_receiver(void *baton,
   SVN_ERR(svn_cmdline_fflush(stdout));
   SVN_ERR(svn_cmdline_fflush(stderr));
 
+  if (lb->diffstat)
+    {
+      svn_stream_t *outstream;
+      svn_stream_t *errstream;
+
+      SVN_ERR(svn_stream_for_stdout(&outstream, pool));
+      SVN_ERR(svn_stream_for_stderr(&errstream, pool));
+
+      SVN_ERR(display_diffstat(log_entry,
+                           lb->target_path_or_url, &lb->target_peg_revision,
+                           lb->depth, lb->diff_extensions,
+                           outstream, errstream,
+                           lb->ctx, pool));
+
+      SVN_ERR(svn_stream_close(outstream));
+      SVN_ERR(svn_stream_close(errstream));
+    }
+
   /* Print a diff if requested. */
   if (lb->show_diff)
     {
@@ -793,6 +869,7 @@ svn_cl__log(apr_getopt_t *os,
   lb.depth = opt_state->depth == svn_depth_unknown ? svn_depth_infinity
                                                    : opt_state->depth;
   lb.diff_extensions = opt_state->extensions;
+  lb.diffstat = opt_state->diffstat;
   lb.merge_stack = NULL;
   lb.search_patterns = opt_state->search_patterns;
   lb.pool = pool;
diff --git a/subversion/svn/propedit-cmd.c b/subversion/svn/propedit-cmd.c
index 520fe6c..8cca60b 100644
--- a/subversion/svn/propedit-cmd.c
+++ b/subversion/svn/propedit-cmd.c
@@ -146,7 +146,7 @@ svn_cl__propedit(apr_getopt_t *os,
                propval, "svn-prop",
                ctx->config,
                svn_prop_needs_translation(pname_utf8),
-               opt_state->encoding, pool));
+               opt_state->encoding, opt_state->verbose, NULL, pool));
 
       /* ...and re-set the property's value accordingly. */
       if (propval)
@@ -284,6 +284,8 @@ svn_cl__propedit(apr_getopt_t *os,
                                                       svn_prop_needs_translation
                                                       (pname_utf8),
                                                       opt_state->encoding,
+                                                      opt_state->verbose,
+                                                      NULL,
                                                       subpool));
 
           target_local = svn_path_is_url(target) ? target
diff --git a/subversion/svn/status.c b/subversion/svn/status.c
index 9ab9c59..daf04e2 100644
--- a/subversion/svn/status.c
+++ b/subversion/svn/status.c
@@ -626,3 +626,81 @@ svn_cl__print_status(const char *target_abspath,
                       text_conflicts, prop_conflicts, tree_conflicts,
                       ctx, pool);
 }
+
+static svn_error_t *
+remove_unversioned(const char *target_abspath,
+             const char *target_path,
+             const char *path,
+             svn_boolean_t quiet,
+             svn_boolean_t detailed,
+             svn_boolean_t show_last_committed,
+             svn_boolean_t repos_locks,
+             const svn_client_status_t *status,
+             unsigned int *text_conflicts,
+             unsigned int *prop_conflicts,
+             unsigned int *tree_conflicts,
+             svn_client_ctx_t *ctx,
+             apr_pool_t *pool)
+{
+  if (combined_status(status) != svn_wc_status_unversioned
+                  && combined_status(status) != svn_wc_status_ignored)
+    return SVN_NO_ERROR;
+
+  apr_status_t  apr_err;
+  apr_finfo_t   finfo;
+
+  apr_err = apr_stat(&finfo, path, APR_FINFO_TYPE | APR_FINFO_LINK, pool);
+  if (apr_err)
+    {
+      return svn_error_wrap_apr(apr_err, _("Can't stat file '%s'"),
+          svn_dirent_local_style(path, pool));
+    }
+
+  if (finfo.filetype == APR_REG || finfo.filetype == APR_LNK)
+    {
+      apr_err = apr_file_remove(path, pool);
+      if (!apr_err)
+        {
+          if (quiet)
+            return SVN_NO_ERROR;
+          SVN_ERR(svn_cmdline_printf(pool, "Unlink %s\n", path));
+          return svn_cmdline_fflush(stdout);
+        }
+      return svn_error_wrap_apr(apr_err, _("Can't remove file '%s'"),
+          svn_dirent_local_style(path, pool));
+    }
+  else if (finfo.filetype == APR_DIR)
+    {
+      SVN_ERR(svn_io_remove_dir2(path, TRUE, NULL, NULL, pool));
+      if (quiet)
+        return SVN_NO_ERROR;
+      SVN_ERR(svn_cmdline_printf(pool, "Remove %s\n", path));
+      return svn_cmdline_fflush(stdout);
+    }
+
+  fprintf(stderr, "Unknown file type: %s %d", path, finfo.filetype);
+  return SVN_NO_ERROR;
+}
+
+/* Called by clean-cmd.c */
+svn_error_t *
+svn_cl__remove_unversioned(const char *target_abspath,
+                     const char *target_path,
+                     const char *path,
+                     const svn_client_status_t *status,
+                     svn_boolean_t suppress_externals_placeholders,
+                     svn_boolean_t detailed,
+                     svn_boolean_t show_last_committed,
+                     svn_boolean_t quiet,
+                     svn_boolean_t repos_locks,
+                     unsigned int *text_conflicts,
+                     unsigned int *prop_conflicts,
+                     unsigned int *tree_conflicts,
+                     svn_client_ctx_t *ctx,
+                     apr_pool_t *pool)
+{
+  return remove_unversioned(target_abspath, target_path, path, quiet,
+                      detailed, show_last_committed, repos_locks, status,
+                      text_conflicts, prop_conflicts, tree_conflicts,
+                      ctx, pool);
+}
diff --git a/subversion/svn/svn.c b/subversion/svn/svn.c
index 058be70..0871fc7 100644
--- a/subversion/svn/svn.c
+++ b/subversion/svn/svn.c
@@ -29,6 +29,7 @@
 
 #include <string.h>
 #include <assert.h>
+#include <unistd.h>
 
 #include <apr_strings.h>
 #include <apr_tables.h>
@@ -57,6 +58,7 @@
 #include "private/svn_opt_private.h"
 #include "private/svn_cmdline_private.h"
 #include "private/svn_subr_private.h"
+#include "private/svn_color.h"
 
 #include "svn_private_config.h"
 
@@ -85,6 +87,8 @@ typedef enum svn_cl__longopt_t {
   opt_ignore_properties,
   opt_properties_only,
   opt_patch_compatible,
+  opt_no_color,
+  opt_diffstat,
   /* end of diff options */
   opt_dry_run,
   opt_editor_cmd,
@@ -201,7 +205,7 @@ const apr_getopt_option_t svn_cl__options[] =
   {"extensions",    'x', 1,
                     N_("Specify differencing options for external diff or\n"
                        "                             "
-                       "internal diff or blame. Default: '-u'. Options are\n"
+                       "internal diff or blame. Default: '-up'. Options are\n"
                        "                             "
                        "separated by spaces. Internal diff and blame take:\n"
                        "                             "
@@ -233,9 +237,9 @@ const apr_getopt_option_t svn_cl__options[] =
   {"stop-on-copy",  opt_stop_on_copy, 0,
                     N_("do not cross copies while traversing history")},
   {"no-ignore",     opt_no_ignore, 0,
-                    N_("disregard default and svn:ignore and\n"
+                    N_("disregard default and svn:ignore and .svnignore\n"
                        "                             "
-                       "svn:global-ignores property ignores")},
+                       "and svn:global-ignores property ignores")},
   {"no-auth-cache", opt_no_auth_cache, 0,
                     N_("do not cache authentication tokens")},
   {"trust-server-cert", opt_trust_server_cert, 0,
@@ -386,6 +390,8 @@ const apr_getopt_option_t svn_cl__options[] =
                        "                             "
                        "--show-copies-as-adds --ignore-properties"
                        )},
+  {"no-color", opt_no_color, 0, N_("disable syntax highlight")},
+  {"stat", opt_diffstat, 0, N_("display statistics of diff")},
   /* end of diff options */
   {"allow-mixed-revisions", opt_allow_mixed_revisions, 0,
                        N_("Allow operation on mixed-revision working copy.\n"
@@ -570,6 +576,10 @@ const svn_opt_subcommand_desc2_t svn_cl__cmd_table[] =
      "  reporting the action taken.\n"),
     {'r', 'q', 'N', opt_depth, opt_force, opt_ignore_externals} },
 
+  { "clean", svn_cl__clean, {0}, N_
+    ("Remove unversioned files and directories.\n"
+     "usage: clean [PATH...]\n"), { 'q', opt_no_ignore, opt_force } },
+
   { "cleanup", svn_cl__cleanup, {0}, N_
     ("Recursively clean up the working copy, removing write locks, resuming\n"
      "unfinished operations, etc.\n"
@@ -608,7 +618,8 @@ const svn_opt_subcommand_desc2_t svn_cl__cmd_table[] =
        "  externals reached by recursion. Do not commit externals with a\n"
        "  fixed revision.\n"),
     {'q', 'N', opt_depth, opt_targets, opt_no_unlock, SVN_CL__LOG_MSG_OPTIONS,
-     opt_changelist, opt_keep_changelists, opt_include_externals} },
+     opt_changelist, opt_keep_changelists, 'v', opt_include_externals},
+    { 'v', N_("show unified diff that this commit will produce") } },
 
   { "copy", svn_cl__copy, {"cp"}, N_
     ("Copy files and directories in a working copy or repository.\n"
@@ -686,7 +697,8 @@ const svn_opt_subcommand_desc2_t svn_cl__cmd_table[] =
      opt_internal_diff, 'x', opt_no_diff_added, opt_no_diff_deleted,
      opt_ignore_properties, opt_properties_only,
      opt_show_copies_as_adds, opt_notice_ancestry, opt_summarize, opt_changelist,
-     opt_force, opt_xml, opt_use_git_diff_format, opt_patch_compatible} },
+     opt_force, opt_xml, opt_use_git_diff_format, opt_patch_compatible,
+     opt_no_color, opt_diffstat, } },
   { "export", svn_cl__export, {0}, N_
     ("Create an unversioned copy of a tree.\n"
      "usage: 1. export [-r REV] URL[@PEGREV] [PATH]\n"
@@ -866,7 +878,7 @@ const svn_opt_subcommand_desc2_t svn_cl__cmd_table[] =
     {'r', 'c', 'q', 'v', 'g', opt_targets, opt_stop_on_copy, opt_incremental,
      opt_xml, 'l', opt_with_all_revprops, opt_with_no_revprops,
      opt_with_revprop, opt_depth, opt_diff, opt_diff_cmd,
-     opt_internal_diff, 'x', opt_search, opt_search_and },
+     opt_internal_diff, 'x', opt_search, opt_search_and, opt_no_color, opt_diffstat },
     {{opt_with_revprop, N_("retrieve revision property ARG")},
      {'c', N_("the change made in revision ARG")},
      {'v', N_("also print all affected paths")},
@@ -1537,7 +1549,7 @@ const svn_opt_subcommand_desc2_t svn_cl__cmd_table[] =
      "  deprecated in favor of running 'svn resolve --accept working'.\n"),
     {opt_targets, 'R', opt_depth, 'q'} },
 
-  { "revert", svn_cl__revert, {0}, N_
+  { "revert", svn_cl__revert, {"rv"}, N_
     ("Restore pristine working copy state (undo local changes).\n"
      "usage: revert PATH...\n"
      "\n"
@@ -1762,6 +1774,23 @@ const svn_opt_subcommand_desc2_t svn_cl__cmd_table[] =
   { NULL, NULL, {0}, NULL, {0} }
 };
 
+static pid_t pager_pid;
+
+static void pager_exit(svn_boolean_t in_signal)
+{
+  if (!pager_pid)
+    return;
+  if (in_signal)
+    fflush(stdout);
+  close(STDOUT_FILENO);
+  waitpid(pager_pid, NULL, 0);
+  pager_pid = 0;
+}
+
+static void wait_for_pager_atexit(void)
+{
+  pager_exit(FALSE);
+}
 
 /* Version compatibility check */
 static svn_error_t *
@@ -1792,6 +1821,9 @@ signal_handler(int signum)
 {
   apr_signal(signum, SIG_IGN);
   cancelled = TRUE;
+  if (signum == SIGTERM || signum == SIGINT || signum == SIGHUP
+      || signum == SIGQUIT || signum == SIGPIPE)
+    pager_exit(TRUE);
 }
 
 /* Our cancellation callback. */
@@ -1856,6 +1888,13 @@ add_search_pattern_to_latest_group(svn_cl__opt_state_t *opt_state,
 static svn_error_t *
 sub_main(int *exit_code, int argc, const char *argv[], apr_pool_t *pool)
 {
+  static const svn_opt_subcommand_desc2_t pseudo_cmd =
+    { "--version", svn_cl__help, {0}, "",
+      {opt_version,    /* must accept its own option */
+       'q',            /* brief output */
+       'v',            /* verbose output */
+       opt_config_dir  /* all commands accept this */
+      } };
   svn_error_t *err;
   int opt_id;
   apr_getopt_t *os;
@@ -2384,6 +2423,12 @@ sub_main(int *exit_code, int argc, const char *argv[], apr_pool_t *pool)
       case opt_patch_compatible:
         opt_state.diff.patch_compatible = TRUE;
         break;
+      case opt_no_color:
+	opt_state.diff.no_color = TRUE;
+	break;
+      case opt_diffstat:
+        opt_state.diffstat = opt_state.diff.diffstat = TRUE;
+        break;
       case opt_use_git_diff_format:
         opt_state.diff.use_git_diff_format = TRUE;
         break;
@@ -2477,14 +2522,6 @@ sub_main(int *exit_code, int argc, const char *argv[], apr_pool_t *pool)
           if (opt_state.version)
             {
               /* Use the "help" subcommand to handle the "--version" option. */
-              static const svn_opt_subcommand_desc2_t pseudo_cmd =
-                { "--version", svn_cl__help, {0}, "",
-                  {opt_version,    /* must accept its own option */
-                   'q',            /* brief output */
-                   'v',            /* verbose output */
-                   opt_config_dir  /* all commands accept this */
-                  } };
-
               subcommand = &pseudo_cmd;
             }
           else
@@ -2632,6 +2669,16 @@ sub_main(int *exit_code, int argc, const char *argv[], apr_pool_t *pool)
                                 "are mutually exclusive"));
     }
 
+  /* Think twice before removing unversioned files. */
+  if (opt_state.force == FALSE && subcommand->cmd_func == svn_cl__clean)
+  {
+    svn_error_clear(
+        svn_cmdline_fprintf(stderr, pool,
+          _("Add option --force if you really want to remove files.\n")));
+    *exit_code = EXIT_FAILURE;
+    return SVN_NO_ERROR;
+  }
+
   /* --trust-* options can only be used with --non-interactive */
   if (!opt_state.non_interactive)
     {
@@ -3037,6 +3084,66 @@ sub_main(int *exit_code, int argc, const char *argv[], apr_pool_t *pool)
     ctx->conflict_baton2 = b;
   }
 
+  if (isatty(STDOUT_FILENO)) {
+    if ((subcommand->cmd_func == svn_cl__diff || subcommand->cmd_func ==
+          svn_cl__log) && opt_state.diff.no_color == FALSE)
+			dont_use_color = FALSE;
+  }
+
+  if (atexit(wait_for_pager_atexit)) {
+    fprintf(stderr, "atexit failed\n");
+    exit(EXIT_FAILURE);
+  }
+
+  if (isatty(STDOUT_FILENO) && (subcommand->cmd_func == svn_cl__blame ||
+		  subcommand->cmd_func == svn_cl__cat ||
+		  subcommand->cmd_func == svn_cl__diff ||
+		  subcommand->cmd_func == svn_cl__log ||
+		  subcommand->cmd_func == svn_cl__status ||
+		  subcommand->cmd_func == svn_cl__list ||
+		  subcommand->cmd_func == svn_cl__help) &&
+      subcommand != &pseudo_cmd) {
+    int fd[2];
+
+    if (pipe(fd) < 0) {
+      fprintf(stderr, "pipe failed\n");
+      exit(EXIT_FAILURE);
+    }
+    if ((pager_pid = fork()) < 0) {
+      fprintf(stderr, "fork failed\n");
+      exit(EXIT_FAILURE);
+    } else if (pager_pid == 0) { /* child */
+      close(fd[1]);
+      if (fd[0] != STDIN_FILENO) {
+        if (dup2(fd[0], STDIN_FILENO) != STDIN_FILENO) {
+          fprintf(stderr, "dup2 failed\n");
+          exit(EXIT_FAILURE);
+        }
+        close(fd[0]);
+      }
+
+      if (execlp("less", "less", "-F", "-X", "-R", (char *)0) < 0) {
+        fprintf(stderr, "exec failed\n");
+        exit(EXIT_FAILURE);
+      }
+      exit(EXIT_SUCCESS);
+    }
+
+    /* parent */
+    if ((tty_fileno = dup(STDOUT_FILENO)) < 0)
+      {
+        fprintf(stderr, "dup for stdout failed: %s\n", strerror(errno));
+        exit(EXIT_FAILURE);
+      }
+    close(fd[0]);
+    if (fd[1] != STDOUT_FILENO) {
+      if (dup2(fd[1], STDOUT_FILENO) != STDOUT_FILENO) {
+        fprintf(stderr, "dup2 for stdout failed\n");
+        exit(EXIT_FAILURE);
+      }
+      close(fd[1]);
+    }
+  }
   /* And now we finally run the subcommand. */
   err = (*subcommand->cmd_func)(os, &command_baton, pool);
   if (err)
diff --git a/subversion/svn/util.c b/subversion/svn/util.c
index 88ae27b..2a58e74 100644
--- a/subversion/svn/util.c
+++ b/subversion/svn/util.c
@@ -32,6 +32,7 @@
 #include <string.h>
 #include <ctype.h>
 #include <assert.h>
+#include <stdio.h>
 
 #include <apr_env.h>
 #include <apr_errno.h>
@@ -194,6 +195,7 @@ struct log_msg_baton
   apr_hash_t *config; /* client configuration hash */
   svn_boolean_t keep_locks; /* Keep repository locks? */
   apr_pool_t *pool; /* a pool. */
+  svn_boolean_t verbose; /* show diff of this commit */
 };
 
 
@@ -206,6 +208,8 @@ svn_cl__make_log_msg_baton(void **baton,
 {
   struct log_msg_baton *lmb = apr_pcalloc(pool, sizeof(*lmb));
 
+  lmb->verbose = opt_state->verbose;
+
   if (opt_state->filedata)
     {
       if (strlen(opt_state->filedata->data) < opt_state->filedata->len)
@@ -399,6 +403,9 @@ svn_cl__get_log_message(const char **log_msg,
           if (! path || !*path)
             path = ".";
 
+	  if (lmb->verbose)
+            item->diff_relpath = path;
+
           if ((item->state_flags & SVN_CLIENT_COMMIT_ITEM_DELETE)
               && (item->state_flags & SVN_CLIENT_COMMIT_ITEM_ADD))
             text_mod = 'R';
@@ -440,6 +447,8 @@ svn_cl__get_log_message(const char **log_msg,
                                                     msg_string, "svn-commit",
                                                     lmb->config, TRUE,
                                                     lmb->message_encoding,
+                                                    lmb->verbose,
+                                                    commit_items,
                                                     pool);
         }
       else /* non_interactive flag says we can't pop up an editor, so error */
@@ -473,6 +482,21 @@ svn_cl__get_log_message(const char **log_msg,
         truncate_buffer_at_prefix(&message->len, message->data,
                                   EDITOR_EOF_PREFIX);
 
+      /* Strip off extra EOL marker */
+      if (message && message->len >= 1)
+        {
+          if (message->len >= 2
+              && message->data[message->len - 2] == '\r'
+              && message->data[message->len - 1] == '\n')
+            {
+              message->len -= 2;
+              message->data[message->len] = 0;
+            }
+          else if (message->data[message->len - 1] == '\r'
+                  || message->data[message->len - 1] == '\n')
+            message->data[--message->len] = 0;
+        }
+
       if (message)
         {
           /* We did get message, now check if it is anything more than just
@@ -492,38 +516,8 @@ svn_cl__get_log_message(const char **log_msg,
 
       if (! message)
         {
-          const char *reply;
-          SVN_ERR(svn_cmdline_prompt_user2
-                  (&reply,
-                   _("\nLog message unchanged or not specified\n"
-                     "(a)bort, (c)ontinue, (e)dit:\n"), NULL, pool));
-          if (reply)
-            {
-              int letter = apr_tolower(reply[0]);
-
-              /* If the user chooses to abort, we cleanup the
-                 temporary file and exit the loop with a NULL
-                 message. */
-              if ('a' == letter)
-                {
-                  SVN_ERR(svn_io_remove_file2(lmb->tmpfile_left, FALSE, pool));
-                  *tmp_file = lmb->tmpfile_left = NULL;
-                  break;
-                }
-
-              /* If the user chooses to continue, we make an empty
-                 message, which will cause us to exit the loop.  We
-                 also cleanup the temporary file. */
-              if ('c' == letter)
-                {
-                  SVN_ERR(svn_io_remove_file2(lmb->tmpfile_left, FALSE, pool));
-                  *tmp_file = lmb->tmpfile_left = NULL;
-                  message = svn_stringbuf_create_empty(pool);
-                }
-
-              /* If the user chooses anything else, the loop will
-                 continue on the NULL message. */
-            }
+          fprintf(stdout, "Aborting commit due to empty commit message.\n");
+          break;
         }
     }
 
diff --git a/subversion/svnmucc/svnmucc.c b/subversion/svnmucc/svnmucc.c
index 1d2be38..77a589b 100644
--- a/subversion/svnmucc/svnmucc.c
+++ b/subversion/svnmucc/svnmucc.c
@@ -437,7 +437,7 @@ log_message_func(const char **log_msg,
 
       SVN_ERR(svn_cmdline__edit_string_externally(
                       &msg, NULL, NULL, "", msg, "svnmucc-commit",
-                      lmb->ctx->config, TRUE, NULL, pool));
+                      lmb->ctx->config, TRUE, NULL, FALSE, NULL, pool));
 
       if (msg && msg->data)
         *log_msg = msg->data;
diff --git a/subversion/tests/cmdline/getopt_tests.py b/subversion/tests/cmdline/getopt_tests.py
index f4e6398..e12a37a 100755
--- a/subversion/tests/cmdline/getopt_tests.py
+++ b/subversion/tests/cmdline/getopt_tests.py
@@ -83,6 +83,9 @@ del_lines_res = [
                  re.compile(r"\* GPG-Agent"),
                  re.compile(r"\* Mac OS X Keychain"),
                  re.compile(r"\* KWallet \(KDE\)"),
+
+                 # Remove my copyright
+                 re.compile(r".*wuzhouhui.*"),
                 ]
 
 # This is a list of lines to search and replace text on.
diff --git a/subversion/tests/cmdline/getopt_tests_data/svn--help_stdout b/subversion/tests/cmdline/getopt_tests_data/svn--help_stdout
index 06e5e03..f85399f 100644
--- a/subversion/tests/cmdline/getopt_tests_data/svn--help_stdout
+++ b/subversion/tests/cmdline/getopt_tests_data/svn--help_stdout
@@ -15,6 +15,7 @@ Available subcommands:
    cat
    changelist (cl)
    checkout (co)
+   clean
    cleanup
    commit (ci)
    copy (cp)
@@ -40,7 +41,7 @@ Available subcommands:
    relocate
    resolve
    resolved
-   revert
+   revert (rv)
    status (stat, st)
    switch (sw)
    unlock
diff --git a/subversion/tests/cmdline/getopt_tests_data/svn_help_log_switch_stdout b/subversion/tests/cmdline/getopt_tests_data/svn_help_log_switch_stdout
index 4d06339..1608230 100644
--- a/subversion/tests/cmdline/getopt_tests_data/svn_help_log_switch_stdout
+++ b/subversion/tests/cmdline/getopt_tests_data/svn_help_log_switch_stdout
@@ -101,7 +101,7 @@ Valid options:
   --diff-cmd ARG           : use ARG as diff command
   --internal-diff          : override diff-cmd specified in config file
   -x [--extensions] ARG    : Specify differencing options for external diff or
-                             internal diff or blame. Default: '-u'. Options are
+                             internal diff or blame. Default: '-up'. Options are
                              separated by spaces. Internal diff and blame take:
                                -u, --unified: Show 3 lines of unified context
                                -b, --ignore-space-change: Ignore changes in
@@ -112,6 +112,8 @@ Valid options:
                                -p, --show-c-function: Show C function name
   --search ARG             : use ARG as search pattern (glob syntax)
   --search-and ARG         : combine ARG with the previous search pattern
+  --no-color               : disable syntax highlight
+  --stat                   : display statistics of diff
 
 Global options:
   --username ARG           : specify a username ARG
diff --git a/subversion/tests/cmdline/getopt_tests_data/svn_help_stdout b/subversion/tests/cmdline/getopt_tests_data/svn_help_stdout
index 06e5e03..f85399f 100644
--- a/subversion/tests/cmdline/getopt_tests_data/svn_help_stdout
+++ b/subversion/tests/cmdline/getopt_tests_data/svn_help_stdout
@@ -15,6 +15,7 @@ Available subcommands:
    cat
    changelist (cl)
    checkout (co)
+   clean
    cleanup
    commit (ci)
    copy (cp)
@@ -40,7 +41,7 @@ Available subcommands:
    relocate
    resolve
    resolved
-   revert
+   revert (rv)
    status (stat, st)
    switch (sw)
    unlock
diff --git a/subversion/tests/cmdline/import_tests.py b/subversion/tests/cmdline/import_tests.py
index 0d1ccad..cf429b6 100755
--- a/subversion/tests/cmdline/import_tests.py
+++ b/subversion/tests/cmdline/import_tests.py
@@ -537,10 +537,10 @@ def import_inherited_ignores(sbox):
      'A    ' + os.path.join(F_path, dir5_path)  + '\n',
      'A    ' + os.path.join(F_path, file5_path) + '\n',
      'A    ' + os.path.join(F_path, dir6_path)  + '\n',
-     'A    ' + os.path.join(F_path, file6_path) + '\n',
      'A    ' + os.path.join(F_path, dir7_path)  + '\n',
      'A    ' + os.path.join(F_path, file7_path) + '\n',
      'A    ' + os.path.join(F_path, dir8_path)  + '\n',
+     'A    ' + os.path.join(F_path, file6_path) + '\n',
      'Updated to revision 5.\n'])
   svntest.actions.run_and_verify_svn(expected_output, [], 'up', wc_dir)
 
diff --git a/tools/client-side/bash_completion b/tools/client-side/bash_completion
index 8187fde..99de279 100644
--- a/tools/client-side/bash_completion
+++ b/tools/client-side/bash_completion
@@ -162,11 +162,11 @@ _svn()
 	cur=${COMP_WORDS[COMP_CWORD]}
 
 	# Possible expansions, without pure-prefix abbreviations such as "up".
-	cmds='add auth blame annotate praise cat changelist cl checkout co cleanup'
+	cmds='add auth blame annotate praise cat changelist cl checkout co clean cleanup'
 	cmds="$cmds commit ci copy cp delete remove rm diff export help import"
 	cmds="$cmds info list ls lock log merge mergeinfo mkdir move mv rename"
 	cmds="$cmds patch propdel pdel propedit pedit propget pget proplist"
-	cmds="$cmds plist propset pset relocate resolve resolved revert status"
+	cmds="$cmds plist propset pset relocate resolve resolved revert rv status"
 	cmds="$cmds switch unlock update upgrade"
 
 	# help options have a strange command status...
@@ -707,7 +707,7 @@ _svn()
 		    st*) # status completion must include all files
 			files=$cur*
 			;;
-		    ci|commit|revert|di*) # anything edited
+		    ci|commit|revert|rv|di*) # anything edited
 			files=$($status $cs| _svn_grcut '@([MADR!]*| M*|_M*)')
 			;;
 		    add) # unknown files
@@ -817,6 +817,9 @@ _svn()
 		cmdOpts="$rOpts $qOpts $nOpts $pOpts --ignore-externals \
                          --force"
 		;;
+	clean)
+		cmdOpts="$qOpts $pOpts --no-ignore --force"
+		;;
 	cleanup)
 		cmdOpts="--diff3-cmd $pOpts --include-externals -q --quiet\
 			--remove-ignored --remove-unversioned"
@@ -824,7 +827,7 @@ _svn()
 	commit|ci)
 		cmdOpts="$mOpts $qOpts $nOpts --targets --editor-cmd $pOpts \
 		         --no-unlock $cOpts --keep-changelists \
-		         --include-externals"
+		         --include-externals -v --verbose"
 		;;
 	copy|cp)
 		cmdOpts="$mOpts $rOpts $qOpts --editor-cmd $pOpts --parents \
@@ -840,7 +843,7 @@ _svn()
 		         -c --change --summarize $cOpts --xml --git \
 		         --internal-diff --show-copies-as-adds \
 		         --ignore-properties --properties-only --no-diff-added \
-		         --patch-compatible"
+		         --patch-compatible --no-color --stat"
 		;;
 	export)
 		cmdOpts="$rOpts $qOpts $pOpts $nOpts --force --native-eol \
@@ -871,7 +874,8 @@ _svn()
 		         --incremental --xml $qOpts -l --limit -c --change \
                          $gOpts --with-all-revprops --with-revprop --depth \
 		         --diff --diff-cmd -x --extensions --internal-diff \
-		         --with-no-revprops --search --search-and"
+		         --with-no-revprops --search --search-and --no-color \
+			 --stat"
 		;;
 	merge)
 		cmdOpts="$rOpts $nOpts $qOpts --force --dry-run --diff3-cmd \
@@ -930,7 +934,7 @@ _svn()
 	resolved)
 		cmdOpts="--targets -R --recursive $qOpts $pOpts --depth"
 		;;
-	revert)
+	revert|rv)
 		cmdOpts="--targets -R --recursive $qOpts $cOpts \
                          --depth $pOpts"
 		;;
